/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign in and receive a JWT token and user roles. */
        post: operations["AuthController_signIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Users */
        get: operations["UserController_findAll"];
        put?: never;
        /** Creates a User */
        post: operations["UserController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one User */
        get: operations["UserController_findOne"];
        put?: never;
        post?: never;
        /** Removes a User */
        delete: operations["UserController_remove"];
        options?: never;
        head?: never;
        /** Updates a User */
        patch: operations["UserController_update"];
        trace?: never;
    };
    "/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Roles */
        get: operations["RoleController_findAll"];
        put?: never;
        /** Creates a Role */
        post: operations["RoleController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Role */
        get: operations["RoleController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Role */
        delete: operations["RoleController_remove"];
        options?: never;
        head?: never;
        /** Updates a Role */
        patch: operations["RoleController_update"];
        trace?: never;
    };
    "/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Orders */
        get: operations["OrderController_findAll"];
        put?: never;
        /** Creates a Order */
        post: operations["OrderController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Order */
        get: operations["OrderController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Order */
        delete: operations["OrderController_remove"];
        options?: never;
        head?: never;
        /** Updates a Order */
        patch: operations["OrderController_update"];
        trace?: never;
    };
    "/order-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Order Types */
        get: operations["OrderCategoryController_findAll"];
        put?: never;
        /** Creates a Order Type */
        post: operations["OrderCategoryController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order-categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Order Type */
        get: operations["OrderCategoryController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Order Type */
        delete: operations["OrderCategoryController_remove"];
        options?: never;
        head?: never;
        /** Updates a Order Type */
        patch: operations["OrderCategoryController_update"];
        trace?: never;
    };
    "/order-menu-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Order Menu Items */
        get: operations["OrderMenuItemController_findAll"];
        put?: never;
        /** Creates a Order Menu Item */
        post: operations["OrderMenuItemController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order-menu-items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Order Menu Item */
        get: operations["OrderMenuItemController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Order Menu Item */
        delete: operations["OrderMenuItemController_remove"];
        options?: never;
        head?: never;
        /** Updates a Order Menu Item */
        patch: operations["OrderMenuItemController_update"];
        trace?: never;
    };
    "/order-container-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Order Menu Item Component */
        get: operations["OrderContainerItemController_findAll"];
        put?: never;
        /** Creates a Order Menu Item Component */
        post: operations["OrderContainerItemController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order-container-items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Order Menu Item Component */
        get: operations["OrderContainerItemController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Order Menu Item Component */
        delete: operations["OrderContainerItemController_remove"];
        options?: never;
        head?: never;
        /** Updates a Order Menu Item Component */
        patch: operations["OrderContainerItemController_update"];
        trace?: never;
    };
    "/menu-item-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Menu Item Categories */
        get: operations["MenuItemCategoryController_findAll"];
        put?: never;
        /** Creates a Menu Item Category */
        post: operations["MenuItemCategoryController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-item-categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Menu Item Category */
        get: operations["MenuItemCategoryController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Menu Item Category */
        delete: operations["MenuItemCategoryController_remove"];
        options?: never;
        head?: never;
        /** Updates a Menu Item Category */
        patch: operations["MenuItemCategoryController_update"];
        trace?: never;
    };
    "/menu-item-sizes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Menu Item Sizes */
        get: operations["MenuItemSizeController_findAll"];
        put?: never;
        /** Creates a Menu Item Size */
        post: operations["MenuItemSizeController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-item-sizes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Menu Item Size */
        get: operations["MenuItemSizeController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Menu Item Size */
        delete: operations["MenuItemSizeController_remove"];
        options?: never;
        head?: never;
        /** Updates a Menu Item Size */
        patch: operations["MenuItemSizeController_update"];
        trace?: never;
    };
    "/menu-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Menu Items */
        get: operations["MenuItemController_findAll"];
        put?: never;
        /** Creates a Menu Item */
        post: operations["MenuItemController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Menu Item */
        get: operations["MenuItemController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Menu Item */
        delete: operations["MenuItemController_remove"];
        options?: never;
        head?: never;
        /** Updates a Menu Item */
        patch: operations["MenuItemController_update"];
        trace?: never;
    };
    "/menu-item-container-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Menu Item Components */
        get: operations["MenuItemContainerItemController_findAll"];
        put?: never;
        /** Creates a Menu Item Component */
        post: operations["MenuItemContainerItemController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-item-container-items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Menu Item Component */
        get: operations["MenuItemContainerItemController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Menu Item Component */
        delete: operations["MenuItemContainerItemController_remove"];
        options?: never;
        head?: never;
        /** Updates a Menu Item Component */
        patch: operations["MenuItemContainerItemController_update"];
        trace?: never;
    };
    "/menu-item-container-options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Menu Item Component Options */
        get: operations["MenuItemContainerOptionsController_findAll"];
        put?: never;
        /** Creates Menu Item Component Options */
        post: operations["MenuItemContainerOptionsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-item-container-options/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves Menu Item Component Options */
        get: operations["MenuItemContainerOptionsController_findOne"];
        put?: never;
        post?: never;
        /** Removes Menu Item Component Options */
        delete: operations["MenuItemContainerOptionsController_remove"];
        options?: never;
        head?: never;
        /** Updates Menu Item Component Options */
        patch: operations["MenuItemContainerOptionsController_update"];
        trace?: never;
    };
    "/menu-item-container-rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Component Option */
        get: operations["MenuItemContainerRuleController_findAll"];
        put?: never;
        /** Creates a Menu item container component option (1 rule of the container options determing a valid menuItem and its allowed sizes) */
        post: operations["MenuItemContainerRuleController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-item-container-rules/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Component Option */
        get: operations["MenuItemContainerRuleController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Component Option */
        delete: operations["MenuItemContainerRuleController_remove"];
        options?: never;
        head?: never;
        /** Updates a Component Option */
        patch: operations["MenuItemContainerRuleController_update"];
        trace?: never;
    };
    "/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Templates */
        get: operations["TemplateController_findAll"];
        put?: never;
        /** Creates a Template */
        post: operations["TemplateController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Template */
        get: operations["TemplateController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Template */
        delete: operations["TemplateController_remove"];
        options?: never;
        head?: never;
        /** Updates a Template */
        patch: operations["TemplateController_update"];
        trace?: never;
    };
    "/template-menu-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Template Menu Items */
        get: operations["TemplateMenuItemController_findAll"];
        put?: never;
        /** Creates a Template Menu Item */
        post: operations["TemplateMenuItemController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/template-menu-items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Template Menu Item */
        get: operations["TemplateMenuItemController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Template Menu Item */
        delete: operations["TemplateMenuItemController_remove"];
        options?: never;
        head?: never;
        /** Updates a Template Menu Item */
        patch: operations["TemplateMenuItemController_update"];
        trace?: never;
    };
    "/labels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Labels */
        get: operations["LabelController_findAll"];
        put?: never;
        /** Creates a Label */
        post: operations["LabelController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/labels/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Label */
        get: operations["LabelController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Label */
        delete: operations["LabelController_remove"];
        options?: never;
        head?: never;
        /** Updates a Label */
        patch: operations["LabelController_update"];
        trace?: never;
    };
    "/label-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Label Types */
        get: operations["LabelTypeController_findAll"];
        put?: never;
        /** Creates a Label Type */
        post: operations["LabelTypeController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/label-types/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Label Type */
        get: operations["LabelTypeController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Label Type */
        delete: operations["LabelTypeController_remove"];
        options?: never;
        head?: never;
        /** Updates a Label Type */
        patch: operations["LabelTypeController_update"];
        trace?: never;
    };
    "/inventory-areas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Inventory Areas */
        get: operations["InventoryAreaController_findAll"];
        put?: never;
        /** Creates a Inventory Area */
        post: operations["InventoryAreaController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-areas/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Inventory Area */
        get: operations["InventoryAreaController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Inventory Area */
        delete: operations["InventoryAreaController_remove"];
        options?: never;
        head?: never;
        /** Updates a Inventory Area */
        patch: operations["InventoryAreaController_update"];
        trace?: never;
    };
    "/inventory-area-counts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Inventory Area Count */
        get: operations["InventoryAreaCountController_findAll"];
        put?: never;
        /** Creates an Inventory Area Count */
        post: operations["InventoryAreaCountController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-area-counts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Inventory Area Count */
        get: operations["InventoryAreaCountController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Inventory Area Count */
        delete: operations["InventoryAreaCountController_remove"];
        options?: never;
        head?: never;
        /** Updates a Inventory Area Count */
        patch: operations["InventoryAreaCountController_update"];
        trace?: never;
    };
    "/inventory-area-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Inventory Area Items */
        get: operations["InventoryAreaItemController_findAll"];
        put?: never;
        /** Creates a Inventory Area Item */
        post: operations["InventoryAreaItemController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-area-items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Inventory Area Item */
        get: operations["InventoryAreaItemController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Inventory Area Item */
        delete: operations["InventoryAreaItemController_remove"];
        options?: never;
        head?: never;
        /** Updates a Inventory Area Item */
        patch: operations["InventoryAreaItemController_update"];
        trace?: never;
    };
    "/inventory-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Inventory Items */
        get: operations["InventoryItemController_findAll"];
        put?: never;
        /** Creates a Inventory Item */
        post: operations["InventoryItemController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Inventory Item */
        get: operations["InventoryItemController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Inventory Item */
        delete: operations["InventoryItemController_remove"];
        options?: never;
        head?: never;
        /** Updates a Inventory Item */
        patch: operations["InventoryItemController_update"];
        trace?: never;
    };
    "/inventory-item-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Inventory Item Categories */
        get: operations["InventoryItemCategoryController_findAll"];
        put?: never;
        /** Creates a Inventory Item Category */
        post: operations["InventoryItemCategoryController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-item-categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Inventory Item Category */
        get: operations["InventoryItemCategoryController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Inventory Item Category */
        delete: operations["InventoryItemCategoryController_remove"];
        options?: never;
        head?: never;
        /** Updates a Inventory Item Category */
        patch: operations["InventoryItemCategoryController_update"];
        trace?: never;
    };
    "/inventory-item-packages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Inventory Item Packages */
        get: operations["InventoryItemPackageController_findAll"];
        put?: never;
        /** Creates a Inventory Item Package */
        post: operations["InventoryItemPackageController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-item-packages/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Inventory Item Package */
        get: operations["InventoryItemPackageController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Inventory Item Package */
        delete: operations["InventoryItemPackageController_remove"];
        options?: never;
        head?: never;
        /** Updates a Inventory Item Package */
        patch: operations["InventoryItemPackageController_update"];
        trace?: never;
    };
    "/inventory-item-sizes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Inventory Item Sizes */
        get: operations["InventoryItemSizeController_findAll"];
        put?: never;
        /** Creates a Inventory Item Size */
        post: operations["InventoryItemSizeController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-item-sizes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Inventory Item Size */
        get: operations["InventoryItemSizeController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Inventory Item Size */
        delete: operations["InventoryItemSizeController_remove"];
        options?: never;
        head?: never;
        /** Updates a Inventory Item Size */
        patch: operations["InventoryItemSizeController_update"];
        trace?: never;
    };
    "/inventory-item-vendors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Inventory Item Vendors */
        get: operations["InventoryItemVendorController_findAll"];
        put?: never;
        /** Creates a Inventory Item Vendor */
        post: operations["InventoryItemVendorController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory-item-vendors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Inventory Item Vendor */
        get: operations["InventoryItemVendorController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Inventory Item Vendor */
        delete: operations["InventoryItemVendorController_remove"];
        options?: never;
        head?: never;
        /** Updates a Inventory Item Vendor */
        patch: operations["InventoryItemVendorController_update"];
        trace?: never;
    };
    "/units-of-measure": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Units of Measure */
        get: operations["UnitOfMeasureController_findAll"];
        put?: never;
        /** Creates a Unit of Measure */
        post: operations["UnitOfMeasureController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/units-of-measure/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Unit of Measure */
        get: operations["UnitOfMeasureController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Unit of Measure */
        delete: operations["UnitOfMeasureController_remove"];
        options?: never;
        head?: never;
        /** Updates a Unit of Measure */
        patch: operations["UnitOfMeasureController_update"];
        trace?: never;
    };
    "/unit-of-measure-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Unit Categories */
        get: operations["UnitOfMeasureCategoryController_findAll"];
        put?: never;
        /** Creates a Unit Category */
        post: operations["UnitOfMeasureCategoryController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/unit-of-measure-categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Unit Category */
        get: operations["UnitOfMeasureCategoryController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Unit Category */
        delete: operations["UnitOfMeasureCategoryController_remove"];
        options?: never;
        head?: never;
        /** Updates a Unit Category */
        patch: operations["UnitOfMeasureCategoryController_update"];
        trace?: never;
    };
    "/recipes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Recipes */
        get: operations["RecipeController_findAll"];
        put?: never;
        /** Creates a Recipe */
        post: operations["RecipeController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Recipe */
        get: operations["RecipeController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Recipe */
        delete: operations["RecipeController_remove"];
        options?: never;
        head?: never;
        /** Updates a Recipe */
        patch: operations["RecipeController_update"];
        trace?: never;
    };
    "/recipe-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Recipe Categories */
        get: operations["RecipeCategoryController_findAll"];
        put?: never;
        /** Creates a Recipe Category */
        post: operations["RecipeCategoryController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe-categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Recipe Category */
        get: operations["RecipeCategoryController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Recipe Category */
        delete: operations["RecipeCategoryController_remove"];
        options?: never;
        head?: never;
        /** Updates a Recipe Category */
        patch: operations["RecipeCategoryController_update"];
        trace?: never;
    };
    "/recipe-sub-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Recipe Sub Categories */
        get: operations["RecipeSubCategoryController_findAll"];
        put?: never;
        /** Creates a Recipe Sub Category */
        post: operations["RecipeSubCategoryController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe-sub-categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Recipe Sub Category */
        get: operations["RecipeSubCategoryController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Recipe Sub Category */
        delete: operations["RecipeSubCategoryController_remove"];
        options?: never;
        head?: never;
        /** Updates a Recipe Sub Category */
        patch: operations["RecipeSubCategoryController_update"];
        trace?: never;
    };
    "/recipe-ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an array of Recipe Ingredients */
        get: operations["RecipeIngredientController_findAll"];
        put?: never;
        /** Creates a Recipe Ingredient */
        post: operations["RecipeIngredientController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe-ingredients/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves one Recipe Ingredient */
        get: operations["RecipeIngredientController_findOne"];
        put?: never;
        post?: never;
        /** Removes a Recipe Ingredient */
        delete: operations["RecipeIngredientController_remove"];
        options?: never;
        head?: never;
        /** Updates a Recipe Ingredient */
        patch: operations["RecipeIngredientController_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SignInDto: {
            /** @example johndoe */
            username: string;
            /** @example password123 */
            password: string;
        };
        AuthResponseDto: {
            /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
            access_token: string;
            /**
             * @description for frontend rendering, not for any authentication reasons
             * @example [
             *       "admin",
             *       "staff"
             *     ]
             */
            roles: string[];
        };
        User: {
            /**
             * @description The unique identifier of the user
             * @example 1
             */
            id: number;
            /**
             * @description Username of the user
             * @example johndoe
             */
            username: string;
            /**
             * Format: email
             * @description Email address
             * @example john@example.com
             */
            email?: string | null;
            /**
             * Format: date-time
             * @description date the user was created
             * @example 2025-06-05T23:00:17.814Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description date the user was most recently updated
             * @example 2025-06-05T23:00:17.814Z
             */
            updatedAt: string;
            /**
             * @description list of roles the user possess to determine feature access
             * @example [
             *       {
             *         "id": 1,
             *         "roleName": "staff",
             *         "users": [
             *           {}
             *         ]
             *       }
             *     ]
             */
            roles: components["schemas"]["Role"][];
        };
        Role: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description Name of the role
             * @example Staff
             */
            roleName: string;
            /**
             * @description List of users who possess this role
             * @example [
             *       {
             *         "id": 1,
             *         "userName": "jim",
             *         "email": "jim@email.com",
             *         "roles": [
             *           {}
             *         ]
             *       }
             *     ]
             */
            users: components["schemas"]["User"][];
        };
        CreateUserDto: {
            /** @example jsmith123 */
            username: string;
            /** @example jjsmithy@email.com */
            email?: string;
            /** @example strongPassword1234 */
            password: string;
            /**
             * @description Id of roles the user has.
             * @example [
             *       1,
             *       2
             *     ]
             */
            roleIds?: string[];
        };
        UpdateUserDto: {
            /** @example jsmith123 */
            username?: string;
            /** @example jjsmithy@email.com */
            email?: Record<string, never>;
            /** @example strongPassword1234 */
            password?: string;
            /**
             * @description Id of roles the user has.
             * @example [
             *       1,
             *       2
             *     ]
             */
            roleIds?: string[];
        };
        CreateRoleDto: {
            /**
             * @description Name of the Role entity.
             * @example staff
             */
            roleName: string;
        };
        UpdateRoleDto: {
            /**
             * @description Name of the Role entity.
             * @example manager
             */
            roleName?: string;
        };
        MenuItemCategory: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description Name of the category
             * @example Pastry
             */
            categoryName: string;
            /**
             * @description MenuItems that are under the category instance
             * @example [
             *       {
             *         "id": 1,
             *         "itemname": "Classic Apple",
             *         "category": {},
             *         "validSizes": [
             *           {
             *             "id": 1,
             *             "name": "medium"
             *           }
             *         ],
             *         "definedContainerItems": [
             *           {}
             *         ],
             *         "containerOptions": {}
             *       }
             *     ]
             */
            categoryItems: components["schemas"]["MenuItem"][];
        };
        MenuItemSize: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description The naming identifier of the size.
             * @example medium
             */
            name: string;
        };
        MenuItemContainerItem: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description The MenuItem that is the container to this item
             * @example {
             *       "id": 1,
             *       "itemname": "Classic Apple",
             *       "category": {},
             *       "validSizes": [
             *         {
             *           "id": 1,
             *           "name": "medium"
             *         }
             *       ],
             *       "definedContainerItems": [
             *         {}
             *       ],
             *       "containerOptions": {}
             *     }
             */
            parentContainer: components["schemas"]["MenuItem"];
            /**
             * @description The size of the container to this item
             * @example {
             *       "id": 1,
             *       "name": "medium"
             *     }
             */
            parentContainerSize: components["schemas"]["MenuItemSize"];
            /**
             * @description The menuItem that is being referenced as the contained item
             * @example {
             *       "id": 1,
             *       "itemname": "Classic Apple",
             *       "category": {},
             *       "validSizes": [
             *         {
             *           "id": 1,
             *           "name": "medium"
             *         }
             *       ],
             *       "definedContainerItems": [
             *         {}
             *       ],
             *       "containerOptions": {}
             *     }
             */
            containedItem: components["schemas"]["MenuItem"];
            /**
             * @description The size of the MenuItem that is being contained
             * @example {
             *       "id": 1,
             *       "name": "medium"
             *     }
             */
            containedItemsize: components["schemas"]["MenuItemSize"];
            /**
             * @description The amount of the contained MenuItem.
             * @example {}
             */
            quantity: number;
        };
        MenuItemContainerRule: {
            /**
             * @description The unique identifier of the entity.
             * @example 1
             */
            id: number;
            /**
             * @description The container options this rule applies to.
             * @example {
             *       "id": 1,
             *       "parentContainer": {},
             *       "containerRules": [
             *         {}
             *       ],
             *       "validQuantity": 1
             *     }
             */
            parentContainerOption: components["schemas"]["MenuItemContainerOptions"];
            /**
             * @description The MenuItem this rule states is valid in the container.
             * @example {
             *       "id": 1,
             *       "itemname": "Classic Apple",
             *       "category": {},
             *       "validSizes": [
             *         {
             *           "id": 1,
             *           "name": "medium"
             *         }
             *       ],
             *       "definedContainerItems": [
             *         {}
             *       ],
             *       "containerOptions": {}
             *     }
             */
            validItem: components["schemas"]["MenuItem"];
            /**
             * @description The sizes of the validItem that is allowed in the container.
             * @example [
             *       {
             *         "id": 1,
             *         "name": "medium"
             *       }
             *     ]
             */
            validSizes: components["schemas"]["MenuItemSize"][];
        };
        MenuItemContainerOptions: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description The MenuItem these options apply to.
             * @example {
             *       "id": 1,
             *       "itemname": "Classic Apple",
             *       "category": {},
             *       "validSizes": [
             *         {
             *           "id": 1,
             *           "name": "medium"
             *         }
             *       ],
             *       "definedContainerItems": [
             *         {}
             *       ],
             *       "containerOptions": {}
             *     }
             */
            parentContainer: components["schemas"]["MenuItem"];
            /**
             * @description The rules describing what items are allowed in the container and what sizes
             * @example [
             *       {
             *         "id": 1,
             *         "parentContainerOption": {},
             *         "validItem": {
             *           "id": 1,
             *           "itemname": "Classic Apple",
             *           "category": {},
             *           "validSizes": [
             *             {
             *               "id": 1,
             *               "name": "medium"
             *             }
             *           ],
             *           "definedContainerItems": [
             *             {}
             *           ],
             *           "containerOptions": {}
             *         },
             *         "validSizes": [
             *           {
             *             "id": 1,
             *             "name": "medium"
             *           }
             *         ]
             *       }
             *     ]
             */
            containerRules: components["schemas"]["MenuItemContainerRule"][];
            /**
             * @description The total size of the container that the child items must total.
             * @example 6
             */
            validQuantity: number;
        };
        MenuItem: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description The category assigned to the item
             * @example {
             *       "id": 1,
             *       "categoryName": "pie",
             *       "categoryItems": [
             *         {}
             *       ]
             *     }
             */
            category?: components["schemas"]["MenuItemCategory"] | null;
            /**
             * @description Name of the item
             * @example Class Apple Pie
             */
            itemName: string;
            /**
             * @description The vegan counterpart to the item.
             * @example {}
             */
            veganOption?: components["schemas"]["MenuItem"] | null;
            /**
             * @description The take n bake counterpart to the time
             * @example {}
             */
            takeNBakeOption?: components["schemas"]["MenuItem"] | null;
            /**
             * @description The vegan take n bake option for the item
             * @example {}
             */
            veganTakeNBakeOption?: components["schemas"]["MenuItem"] | null;
            validSizes: components["schemas"]["MenuItemSize"][][];
            /**
             * @description A flag for items that are "Pie of the Month" specials
             * @example false
             */
            isPOTM: boolean;
            /**
             * @description A flag for items that require par shells in its baking process
             * @example true
             */
            isParbake: boolean;
            /**
             * @description When the item is a container for other MenuItems, and the contained is a fixed set of items per container size.
             * @example [
             *       {
             *         "id": 1,
             *         "parentContainer": {},
             *         "parentContainerSize": {},
             *         "containedItem": {
             *           "id": 1,
             *           "itemname": "Classic Apple",
             *           "category": {},
             *           "validSizes": [
             *             {
             *               "id": 1,
             *               "name": "medium"
             *             }
             *           ],
             *           "definedContainerItems": [
             *             {}
             *           ],
             *           "containerOptions": {}
             *         },
             *         "containedItemSize": {
             *           "id": 1,
             *           "name": "medium"
             *         },
             *         "quantity": 1
             *       }
             *     ]
             */
            definedContainerItems: components["schemas"]["MenuItemContainerItem"][];
            /**
             * @description When the item is a container for other MenuItems, and the contained items can vary between a set of items and their sizes, totaling a declared size.
             * @example {
             *       "id": 1,
             *       "parentContainer": {},
             *       "containerRules": [
             *         {
             *           "id": 1,
             *           "parentContainerOption": {},
             *           "validItem": {
             *             "id": 1,
             *             "itemname": "Classic Apple",
             *             "category": {},
             *             "validSizes": [
             *               {
             *                 "id": 1,
             *                 "name": "medium"
             *               }
             *             ],
             *             "definedContainerItems": [
             *               {}
             *             ],
             *             "containerOptions": {}
             *           },
             *           "validSizes": [
             *             {
             *               "id": 1,
             *               "name": "medium"
             *             }
             *           ]
             *         }
             *       ],
             *       "validQuantity": 1
             *     }
             */
            containerOptions?: components["schemas"]["MenuItemContainerOptions"] | null;
            /**
             * Format: date-time
             * @description Date the item was created
             * @example 2025-06-06T19:22:07.102Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Date the item was last modified
             * @example 2025-06-06T19:22:07.102Z
             */
            updatedAt: string;
        };
        OrderContainerItem: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description The OrderMenuItem that is the container for this item
             * @example {
             *       "id": 1,
             *       "order": {},
             *       "menuItem": {
             *         "id": 1,
             *         "itemname": "Classic Apple",
             *         "category": {},
             *         "validSizes": [
             *           {
             *             "id": 1,
             *             "name": "medium"
             *           }
             *         ],
             *         "definedContainerItems": [
             *           {}
             *         ],
             *         "containerOptions": {}
             *       },
             *       "quantity": 2,
             *       "size": {
             *         "id": 1,
             *         "name": "medium"
             *       },
             *       "orderedContainerItems": [
             *         {}
             *       ]
             *     }
             */
            parentOrderItem: components["schemas"]["OrderMenuItem"];
            /**
             * @description The MenuItem being contained
             * @example {
             *       "id": 1,
             *       "itemname": "Classic Apple",
             *       "category": {},
             *       "validSizes": [
             *         {
             *           "id": 1,
             *           "name": "medium"
             *         }
             *       ],
             *       "definedContainerItems": [
             *         {}
             *       ],
             *       "containerOptions": {}
             *     }
             */
            containedItem: components["schemas"]["MenuItem"];
            /**
             * @description The size of the contained MenuItem
             * @example {
             *       "id": 1,
             *       "name": "medium"
             *     }
             */
            containedItemSize: components["schemas"]["MenuItemSize"];
            /**
             * @description The amount of the contained MenuItem being ordered
             * @example 2
             */
            quantity: number;
        };
        OrderMenuItem: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description The Order this ordered item is on
             * @example {
             *       "id": 1,
             *       "orderCategory": {},
             *       "recipient": "alberto",
             *       "createdAt": "2025-06-28T21:21:08.677Z",
             *       "updatedAt": "2025-06-28T21:21:08.677Z",
             *       "fulfilllmentType": "delivery",
             *       "fulfillmentContactName": "not alberto",
             *       "deliveryAddress": "123 main st",
             *       "phoneNumber": "555-155-2194",
             *       "email": "email@email.com",
             *       "note": "instructions",
             *       "isFrozen": false,
             *       "isWeekly": true,
             *       "weeklyFulfillment": "monday",
             *       "orderedItems": [
             *         {}
             *       ]
             *     }
             */
            order: components["schemas"]["Order"];
            /**
             * @description The MenuItem being ordered
             * @example {
             *       "id": 1,
             *       "itemname": "Classic Apple",
             *       "category": {},
             *       "validSizes": [
             *         {
             *           "id": 1,
             *           "name": "medium"
             *         }
             *       ],
             *       "definedContainerItems": [
             *         {}
             *       ],
             *       "containerOptions": {}
             *     }
             */
            menuItem: components["schemas"]["MenuItem"];
            /**
             * @description The amount of the MenuItem being ordered
             * @example 3
             */
            quantity: number;
            /**
             * @description The size of the ordered MenuItem
             * @example {
             *       "id": 1,
             *       "name": "medium"
             *     }
             */
            size: components["schemas"]["MenuItemSize"];
            /**
             * @description If the ordered MenuItem is a container, the contained items will be listed here
             * @example [
             *       {
             *         "id": 1,
             *         "parentOrderItem": {},
             *         "containedItem": {
             *           "id": 1,
             *           "itemname": "Classic Apple",
             *           "category": {},
             *           "validSizes": [
             *             {
             *               "id": 1,
             *               "name": "medium"
             *             }
             *           ],
             *           "definedContainerItems": [
             *             {}
             *           ],
             *           "containerOptions": {}
             *         },
             *         "containedItemSize": {
             *           "id": 1,
             *           "name": "medium"
             *         },
             *         "quantity": 2
             *       }
             *     ]
             */
            orderedContainerItems: components["schemas"]["OrderContainerItem"][];
        };
        Order: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description The assigned category of the order
             * @example {
             *       "id": 1,
             *       "categoryName": "wholesale",
             *       "orders": [
             *         {}
             *       ]
             *     }
             */
            orderCategory: components["schemas"]["OrderCategory"];
            /**
             * @description The name of the owner of the order
             * @example Cassandra del Apocalypto
             */
            recipient: string;
            /**
             * Format: date-time
             * @description The date the order was created in the DB
             * @example 2025-06-06T19:22:07.102Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date the order was last modified.
             * @example 2025-06-06T19:22:07.102Z
             */
            updatedAt: string;
            /**
             * Format: date-time
             * @description The date the order is due to be picked up or delivered.
             * @example 2025-06-06T19:22:07.102Z
             */
            fulfillmentDate: string;
            /**
             * @description The method of transferring the order to the recipient/fulfillmentContactName (pickup or delivery)
             * @example pickup
             */
            fulfillmentType: string;
            /**
             * @description If the order is for delivery and the recipient property isn't who is recieving the order
             * @example Marcus Bolognese
             */
            fulfillmentContactName?: string | null;
            /**
             * @description If a delivery order, that address to deliver
             * @example 1 Broken Dreams Blvd
             */
            deliveryAddress?: string | null;
            /**
             * @description Phone number associated with order
             * @example 555-420-6969
             */
            phoneNumber?: string | null;
            /**
             * Format: email
             * @description email associated with order
             * @example email@email.com
             */
            email?: string | null;
            /**
             * @description an extra information regarding the order
             * @example This is a note
             */
            note?: string | null;
            /**
             * @description A flag to 'pause' or 'freeze' an order, not included in DB queries for services like aggregates for Reports.
             * @example true
             */
            isFrozen: boolean;
            /**
             * @description A flag if a order occurs on a weekly basis. A traditional order has isWeekly=false (upon fulfillment the order is completed, while a wholesale standing order could occur every thursday)
             * @example
             */
            isWeekly: boolean;
            /**
             * @description If the order isWeekly is set to true, the day of the week the order is fulfilled on.
             * @example tuesday
             */
            weeklyFulfillment?: string | null;
            /**
             * @description If the ordered MenuItem is a container, the contained items will be populated here
             * @example [
             *       {
             *         "id": 1,
             *         "order": {},
             *         "menuItem": {
             *           "id": 1,
             *           "itemname": "Classic Apple",
             *           "category": {},
             *           "validSizes": [
             *             {
             *               "id": 1,
             *               "name": "medium"
             *             }
             *           ],
             *           "definedContainerItems": [
             *             {}
             *           ],
             *           "containerOptions": {}
             *         },
             *         "quantity": 2,
             *         "size": {
             *           "id": 1,
             *           "name": "medium"
             *         },
             *         "orderedContainerItems": [
             *           {
             *             "id": 1,
             *             "parentOrderItem": {},
             *             "containedItem": {
             *               "id": 1,
             *               "itemname": "Classic Apple",
             *               "category": {},
             *               "validSizes": [
             *                 {
             *                   "id": 1,
             *                   "name": "medium"
             *                 }
             *               ],
             *               "definedContainerItems": [
             *                 {}
             *               ],
             *               "containerOptions": {}
             *             },
             *             "containedItemSize": {
             *               "id": 1,
             *               "name": "medium"
             *             },
             *             "quantity": 2
             *           }
             *         ]
             *       }
             *     ]
             */
            orderedItems: components["schemas"]["OrderMenuItem"][];
        };
        OrderCategory: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description Name of the category.
             * @example wholesale
             */
            categoryName: string;
            /**
             * @description Orders under the category
             * @example [
             *       {
             *         "id": 1,
             *         "orderCategory": {},
             *         "recipient": "alberto",
             *         "createdAt": "2025-06-28T21:21:08.677Z",
             *         "updatedAt": "2025-06-28T21:21:08.677Z",
             *         "fulfilllmentType": "delivery",
             *         "fulfillmentContactName": "not alberto",
             *         "deliveryAddress": "123 main st",
             *         "phoneNumber": "555-155-2194",
             *         "email": "email@email.com",
             *         "note": "instructions",
             *         "isFrozen": false,
             *         "isWeekly": true,
             *         "weeklyFulfillment": "monday",
             *         "orderedItems": [
             *           {}
             *         ]
             *       }
             *     ]
             */
            orders: components["schemas"]["Order"][];
        };
        CreateChildOrderContainerItemDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating a OrderMenuItem entity.
             * @example create
             */
            mode: string;
            /**
             * @description Id of the MenuItem that is this item's container
             * @example 1
             */
            parentContainerMenuItemId: number;
            /**
             * @description Id of the MenuItem that is being ordered
             * @example 2
             */
            containedMenuItemId: number;
            /**
             * @description Id of the MenuItemSize that is being ordered, must be a valid size to the containedMenuItem
             * @example 3
             */
            containedMenuItemSizeId: number;
            /**
             * @description amount of the containedMenuItem / containedItemSize being ordered
             * @example 4
             */
            quantity: number;
        };
        CreateChildOrderMenuItemDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating an Order entity.
             * @example create
             */
            mode: string;
            /**
             * @description Id of MenuItem entity being ordered.
             * @example 10
             */
            menuItemId: number;
            /**
             * @description Id of the MenuItemSize entity. Must be valid size for the MenuItem being ordered.
             * @example 2
             */
            menuItemSizeId: number;
            /**
             * @description Amount being ordered.
             * @example 3
             */
            quantity: number;
            /**
             * @description Dtos when creating an OrderMenuItem entity that is a MenuItem with MenuItemContainerOptions
             * @example [
             *       {
             *         "mode": "create",
             *         "parentContainerMenuItemId": 10,
             *         "containedMenuItemId": 4,
             *         "containedMenuItemSizeId": 5,
             *         "quantity": 6
             *       },
             *       {
             *         "mode": "create",
             *         "parentContainerMenuItemId": 10,
             *         "containedMenuItemId": 7,
             *         "containedMenuItemSizeId": 8,
             *         "quantity": 9
             *       }
             *     ]
             */
            orderedItemContainerDtos?: components["schemas"]["CreateChildOrderContainerItemDto"][];
        };
        CreateOrderDto: {
            /**
             * @description Id of OrderType entity.
             * @example 1
             */
            orderCategoryId: number;
            /**
             * @description Name of the owner of the order
             * @example John Smith
             */
            recipient: string;
            /**
             * @description Name of who is picking up the order or reciving the delivery
             * @example Jane Doe
             */
            fulfillmentContactName?: string | null;
            /**
             * Format: date-time
             * @description Date the order is to be available or delivered.
             * @example 2025-06-08T20:26:45.883Z
             */
            fulfillmentDate: string;
            /**
             * @description Method of Order's dispersal.
             * @example delivery
             */
            fulfillmentType: string;
            /**
             * @description for delivery contact information
             * @example 123 main st
             */
            deliveryAddress?: string | null;
            /**
             * @description for delivery contact information
             * @example 1234568
             */
            phoneNumber?: string | null;
            /**
             * Format: email
             * @description for delivery contact information
             * @example email@email.com
             */
            email?: string | null;
            /**
             * @description special instruction for order
             * @example note information
             */
            note?: string | null;
            /**
             * @description A frozen order is inactive and is not included for typical buisness logic opeations. Not included in aggregates or reports.
             * @example false
             */
            isFrozen?: boolean | null;
            /**
             * @description Is true if the order occurs on a weekly basis.
             * @example true
             */
            isWeekly?: boolean | null;
            /**
             * @description If is weekly, is the day of the week the order is fulfilled
             * @example sunday
             */
            weeklyFulfillment?: string | null;
            /**
             * @description An array of CreateChildOrderMenuItemDtos. Child dtos are used when creating an Order entity with child entites.
             * @example [
             *       {
             *         "mode": "create",
             *         "menuItemId": 10,
             *         "menuItemSizeId": 2,
             *         "quantity": 3,
             *         "orderedItemContainerDtos": [
             *           {
             *             "mode": "create",
             *             "parentContainerMenuItemId": 10,
             *             "containedMenuItemId": 4,
             *             "containedMenuItemSizeId": 5,
             *             "quantity": 6
             *           }
             *         ]
             *       }
             *     ]
             */
            orderedMenuItemDtos: components["schemas"]["CreateChildOrderMenuItemDto"][];
        };
        UpdateChildOrderContainerItemDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating a OrderMenuItem entity.
             * @example update
             */
            mode: string;
            /**
             * @description Id of the OrderMenuItemContainerItem to update.
             * @example 1
             */
            id: number;
            /**
             * @description Id of the MenuItem that is this item's container, not available to update, but required for validation
             * @example 2
             */
            parentContainerMenuItemId?: number;
            /**
             * @description Id of the MenuItem being ordered
             * @example 3
             */
            containedMenuItemId?: number;
            /**
             * @description Id of the MenuItemSize that is being ordered, must be a valid size to the containedMenuItem
             * @example 4
             */
            containedMenuItemSizeId?: number;
            /**
             * @description amount of the componentMenuItem / componentItemSize being ordered
             * @example 5
             */
            quantity?: number;
        };
        UpdateChildOrderMenuItemDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating an Order entity.
             * @example update
             */
            mode: string;
            /**
             * @description Id of child OrderMenuItem to be updated
             * @example 1
             */
            id: number;
            /**
             * @description Id of MenuItem entity being ordered.
             * @example 2
             */
            menuItemId?: number;
            /**
             * @description Id of the MenuItemSize entity. Must be valid size for the MenuItem being ordered.
             * @example 3
             */
            menuItemSizeId?: number;
            /**
             * @description Amount being ordered.
             * @example 4
             */
            quantity: number;
            /**
             * @description Dtos when creating an OrderMenuItem entity that is a container for a list of MenuItem
             * @example [
             *       {
             *         "mode": "create",
             *         "parentContainerMenuItemId": 10,
             *         "containedMenuItemId": 4,
             *         "containedMenuItemSizeId": 5,
             *         "quantity": 6
             *       },
             *       {
             *         "mode": "update",
             *         "id": 7,
             *         "parentContainerMenuItemId": 10,
             *         "containedMenuItemId": 8,
             *         "containedMenuItemSizeId": 9,
             *         "quantity": 10
             *       }
             *     ]
             */
            orderedItemContainerDtos?: components["schemas"]["UpdateChildOrderContainerItemDto"][];
        };
        UpdateOrderDto: {
            /**
             * @description Id of OrderType entity.
             * @example 1
             */
            orderCategoryId?: number | null;
            /**
             * @description Name of the owner of the order
             * @example John Smith
             */
            recipient?: string | null;
            /**
             * @description Name of who is picking up the order or reciving the delivery
             * @example Jane Doe
             */
            fulfillmentContactName?: string | null;
            /**
             * @description Date the order is to be available or delivered.
             * @example 2025-06-08T20:26:45.883Z
             */
            fulfillmentDate?: string | null;
            /**
             * @description Method of Order's dispersal.
             * @example delivery
             */
            fulfillmentType?: string | null;
            /**
             * @description for delivery contact information
             * @example 123 main st
             */
            deliveryAddress?: string | null;
            /**
             * @description for delivery contact information
             * @example 1234568
             */
            phoneNumber?: string | null;
            /**
             * Format: email
             * @description for delivery contact information
             * @example email@email.com
             */
            email?: string | null;
            /**
             * @description special instruction for order
             * @example note information
             */
            note?: string | null;
            /**
             * @description A frozen order is inactive and is not included for typical buisness logic opeations. Not included in aggregates or reports.
             * @example false
             */
            isFrozen?: boolean | null;
            /**
             * @description Is true if the order occurs on a weekly basis.
             * @example true
             */
            isWeekly?: boolean | null;
            /**
             * @description If is weekly, is the day of the week the order is fulfilled
             * @example sunday
             */
            weeklyFulfillment?: string | null;
            /**
             * @description An array of CreateChildOrderMenuItemDtos. Child dtos are used when creating an Order entity with child entites.
             * @example [
             *       {
             *         "mode": "update",
             *         "id": 1,
             *         "menuItemId": 10,
             *         "menuItemSizeId": 2,
             *         "quantity": 3,
             *         "orderedItemContainerDtos": [
             *           {
             *             "mode": "update",
             *             "id": 4,
             *             "parentContainerMenuItemId": 10,
             *             "containedMenuItemId": 5,
             *             "containedMenuItemSizeId": 6,
             *             "quantity": 7
             *           },
             *           {
             *             "mode": "create",
             *             "parentContainerMenuItemId": 10,
             *             "containedMenuItemId": 8,
             *             "containedMenuItemSizeId": 9,
             *             "quantity": 10
             *           }
             *         ]
             *       },
             *       {
             *         "mode": "create",
             *         "menuItemId": 10,
             *         "menuItemSizeId": 2,
             *         "quantity": 3,
             *         "orderedItemContainerDtos": [
             *           {
             *             "mode": "create",
             *             "parentContainerMenuItemId": 10,
             *             "containedMenuItemId": 4,
             *             "containedMenuItemSizeId": 5,
             *             "quantity": 6
             *           }
             *         ]
             *       }
             *     ]
             */
            orderedMenuItemDtos?: components["schemas"]["UpdateChildOrderMenuItemDto"][] | null;
        };
        CreateOrderCategoryDto: {
            /**
             * @description Name of the OrderCategory entity.
             * @example Wholesale
             */
            categoryName: string;
        };
        UpdateOrderCategoryDto: {
            /**
             * @description Name of the OrderCategory entity.
             * @example Wholesale
             */
            categoryName?: string;
        };
        CreateOrderMenuItemDto: {
            /**
             * @description Id of Order entity the OrderMenuItem belongs to.
             * @example 1
             */
            orderId: number;
            /**
             * @description Id of MenuItem entity being ordered.
             * @example 2
             */
            menuItemId: number;
            /**
             * @description Id of the MenuItemSize entity. Must be valid size for the MenuItem being ordered.
             * @example 3
             */
            menuItemSizeId: number;
            /** @description Amount being ordered. */
            quantity: number;
            /**
             * @description Dtos when creating an OrderMenuItem entity that is a container for a list of MenuItem
             * @example [
             *       {
             *         "mode": "create",
             *         "parentContainerMenuItemId": 10,
             *         "containedMenuItemId": 4,
             *         "containedMenuItemSizeId": 5,
             *         "quantity": 6
             *       },
             *       {
             *         "mode": "create",
             *         "parentContainerMenuItemId": 10,
             *         "containedMenuItemId": 7,
             *         "containedMenuItemSizeId": 8,
             *         "quantity": 9
             *       }
             *     ]
             */
            orderedItemContainerDtos?: components["schemas"]["CreateChildOrderContainerItemDto"][];
        };
        UpdateOrderMenuItemDto: {
            /**
             * @description Id of MenuItem entity being ordered.
             * @example 1
             */
            menuItemId?: number;
            /**
             * @description Id of the MenuItemSize entity. Must be valid size for the MenuItem being ordered.
             * @example 2
             */
            menuItemSizeId?: number;
            /**
             * @description Amount being ordered.
             * @example 3
             */
            quantity?: number;
            /**
             * @description Dtos when creating an OrderMenuItem entity that is a container for a list of MenuItem
             * @example [
             *       {
             *         "mode": "create",
             *         "parentContainerMenuItemId": 10,
             *         "containedMenuItemId": 4,
             *         "containedMenuItemSizeId": 5,
             *         "quantity": 6
             *       },
             *       {
             *         "mode": "update",
             *         "id": 7,
             *         "parentContainerMenuItemId": 10,
             *         "containedMenuItemId": 8,
             *         "containedMenuItemSizeId": 9,
             *         "quantity": 10
             *       }
             *     ]
             */
            orderedItemContainerDtos?: components["schemas"]["UpdateChildOrderContainerItemDto"][];
        };
        CreateOrderContainerItemDto: {
            /**
             * @description Id of the OrderMenuItem that is the parent
             * @example 1
             */
            parentOrderMenuItemId: number;
            /**
             * @description Id of the MenuItem that is this item's container
             * @example 2
             */
            parentContainerMenuItemId: number;
            /**
             * @description Id of the MenuItem that is being ordered
             * @example 3
             */
            containedMenuItemId: number;
            /**
             * @description Id of the MenuItemSize that is being ordered, must be a valid size to the containedMenuItem
             * @example 4
             */
            containedMenuItemSizeId: number;
            /**
             * @description amount of the containedMenuItem / containedItemSize being ordered
             * @example 5
             */
            quantity: number;
        };
        UpdateOrderContainerItemDto: {
            /**
             * @description Id of the MenuItem that is this item's container, not available to update, but required for validation
             * @example 1
             */
            parentContainerMenuItemId?: number;
            /**
             * @description Id of the MenuItem that is being ordered
             * @example 2
             */
            containedMenuItemId?: number;
            /**
             * @description Id of the MenuItemSize that is being ordered, must be a valid size to the containedMenuItem
             * @example 3
             */
            containedMenuItemSizeId?: number;
            /**
             * @description amount of the containedMenuItem / containedItemSize being ordered
             * @example 4
             */
            quantity?: number;
        };
        CreateMenuItemCategoryDto: {
            /**
             * @description Name of the MenuItemCategory.
             * @example Pastry
             */
            categoryName: string;
        };
        UpdateMenuItemCategoryDto: {
            /**
             * @description Name of the MenuItemCategory.
             * @example Pie
             */
            categoryName?: string;
        };
        CreateMenuItemSizeDto: {
            /**
             * @description Name of MenuItemSize entity.
             * @example medium
             */
            sizeName: string;
        };
        UpdateMenuItemSizeDto: {
            /**
             * @description Name of MenuItemSize entity.
             * @example medium
             */
            sizeName: string;
        };
        CreateChildMenuItemContainerItemDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating a MenuItem entity with components.
             * @example create
             */
            mode: string;
            /**
             * @description Id of a MenuItemSize entity of the parent container
             * @example 1
             */
            parentContainerSizeId: number;
            /**
             * @description Id of a MenuItem entity. Represents the contained MenuItem item.
             * @example 2
             */
            containedMenuItemId: number;
            /**
             * @description Id of a MenuItemSize. The size of the contained item
             * @example 3
             */
            containedMenuItemSizeId: number;
            /**
             * @description The amount of MenuItem/MenuItemSize combination
             * @example 4
             */
            quantity: number;
        };
        CreateChildMenuItemContainerRuleDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating a MenuItemContainerOptions entity.
             * @example create
             */
            mode: string;
            /**
             * @description Id of a MenuItem entity that is a valid component
             * @example 1
             */
            validMenuItemId: number;
            /**
             * @description Id of a MenuItemSize entity that is a valid size to the validMenuItem, and to the container
             * @example [
             *       2,
             *       3
             *     ]
             */
            validSizeIds: string[];
        };
        CreateChildMenuItemContainerOptionsDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating a MenuItem entity.
             * @example create
             */
            mode: string;
            /**
             * @description The list of MenuItems and their sizes that are allowed in the container
             * @example [
             *       {
             *         "mode": "create",
             *         "validMenuItemId": 1,
             *         "validSizeIds": [
             *           2,
             *           3
             *         ]
             *       },
             *       {
             *         "mode": "create",
             *         "validMenuItemId": 4,
             *         "validSizeIds": [
             *           5,
             *           6
             *         ]
             *       }
             *     ]
             */
            containerRuleDtos: components["schemas"]["CreateChildMenuItemContainerRuleDto"][];
            /**
             * @description The total size of the container. When ordered, the summation of ordermenuitemcomponents have to equal this value.
             * @example 7
             */
            validQuantity: number;
        };
        CreateMenuItemDto: {
            /**
             * @description Id of MenuItemCategory entity.
             * @example 1
             */
            categoryId: number | null;
            /**
             * @description Name of MenuItem entity.
             * @example classic apple
             */
            itemName: string;
            /**
             * @description Id of MenuItem entity that is the vegan version of the referencing MenuItem.
             * @example 2
             */
            veganOptionMenuId?: number | null;
            /**
             * @description Id of MenuItem entity that is the Take 'n Bake version of the referencing MenuItem.
             * @example 3
             */
            takeNBakeOptionMenuId?: number | null;
            /**
             * @description Id of MenuItem entity that is the vegan Take 'n Bake version of the referencing MenuItem.
             * @example 4
             */
            veganTakeNBakeOptionMenuId?: number;
            /**
             * @description Ids of MenuItemSize entities. Represents the sizes available for the referencing MenuItem.
             * @example [
             *       5,
             *       6
             *     ]
             */
            validSizeIds: number[];
            /**
             * @description Is Pie of the Month, monthly rotating special, relevant for Pie baking lists.
             * @example false
             */
            isPOTM?: boolean;
            /**
             * @description If pie requires parbaked shells
             * @example false
             */
            isParbake?: boolean | null;
            /**
             * @description Array of CreateChildMenutItemContainerItemDtos. Child dtos are used when creating a parent with child entities.
             * @example [
             *       {
             *         "mode": "create",
             *         "parentContainerSizeId": 1,
             *         "containedMenuItemId": 2,
             *         "containedMenuItemSizeId": 3,
             *         "quantity": 4
             *       }
             *     ]
             */
            definedContainerItemDtos: components["schemas"]["CreateChildMenuItemContainerItemDto"][];
            /**
             * @description options for the menuItem if it serves as a container to other items. Sets rules like valid items, sizes, and quantity of the container.
             * @example {
             *       "mode": "create",
             *       "containerRuleDtos": [
             *         {
             *           "mode": "create",
             *           "validMenuItemId": 5,
             *           "validSizeIds": [
             *             6,
             *             7
             *           ]
             *         },
             *         {
             *           "mode": "create",
             *           "validMenuItemId": 8,
             *           "validSizeIds": [
             *             9,
             *             10
             *           ]
             *         }
             *       ],
             *       "validQuantity": 11
             *     }
             */
            containerOptionDto: components["schemas"]["CreateChildMenuItemContainerOptionsDto"];
        };
        UpdateChildMenuItemContainerItemDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updting a MenuItem entity with components.
             * @example update
             */
            mode: string;
            /**
             * @description Id of a MenuItemContainerItem to update.
             * @example 1
             */
            id: number;
            /**
             * @description Id of a MenuItem entity. Represents the contained MenuItem item.
             * @example 2
             */
            containedMenuItemId?: number;
            /**
             * @description Id of a MenuItemSize entity. The size of the contained item
             * @example 3
             */
            containedMenuItemSizeId?: number;
            /**
             * @description The amount of MenuItem/MenuItemSize combination
             * @example 4
             */
            quantity?: number;
        };
        UpdateChildMenuItemContainerOptionsDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating a MenuItem entity with components.
             * @example update
             */
            mode: string;
            /**
             * @description Id of the MenuItemContainerOptions to update.
             * @example 1
             */
            id: number;
            /**
             * @description The list of MenuItems and their sizes that are allowed in the container
             * @example [
             *       {
             *         "mode": "create",
             *         "validMenuItemId": 2,
             *         "validSizeIds": [
             *           3,
             *           4
             *         ]
             *       },
             *       {
             *         "mode": "update",
             *         "id": 5,
             *         "validMenuItemId": 6,
             *         "validSizeIds": [
             *           7,
             *           8
             *         ]
             *       }
             *     ]
             */
            containerRuleDtos?: components["schemas"]["CreateChildMenuItemContainerRuleDto"][];
            /**
             * @description The total size of the container. When ordered, the summation of OrderMenuItemComponents have to equal this value.
             * @example 9
             */
            validQuantity?: number;
        };
        UpdateMenuItemDto: {
            /**
             * @description Id of MenuItemCategory entity. Pass a null value to remove category
             * @example 1
             */
            categoryId?: number | null;
            /**
             * @description Name of MenuItem entity.
             * @example box of 6 muffins
             */
            itemName?: string | null;
            /**
             * @description Id of MenuItem entity that is the vegan version of the referencing MenuItem. Pass a null value to remove vegan option
             * @example 2
             */
            veganOptionMenuId?: number | null;
            /**
             * @description Id of MenuItem entity that is the Take 'n Bake version of the referencing MenuItem. Pass a null value to remove take n bake option
             * @example 3
             */
            takeNBakeOptionMenuId?: number | null;
            /**
             * @description Id of MenuItem entity that is the vegan Take 'n Bake version of the referencing MenuItem. Pass a null value to remove vegan take n bake option
             * @example 4
             */
            veganTakeNBakeOptionMenuId?: number | null;
            /**
             * @description Ids of MenuItemSize entities. Represents the sizes available for the referencing MenuItem.
             * @example [
             *       5,
             *       6
             *     ]
             */
            validSizeIds?: number[];
            /**
             * @description Is Pie of the Month, monthly rotating special, relevant for Pie baking lists.
             * @example false
             */
            isPOTM?: boolean | null;
            /**
             * @description Pie requires parbaked shells
             * @example false
             */
            isParbake?: boolean | null;
            /**
             * @description Array of CreateChildMenutItemContainerItemDtos. Child dtos are used when creating a parent with child entities. Pass a null value to remove defined container
             * @example [
             *       {
             *         "mode": "create",
             *         "parentContainerSizeId": 1,
             *         "containedMenuItemId": 2,
             *         "containedMenuItemSizeId": 3,
             *         "quantity": 4
             *       },
             *       {
             *         "mode": "update",
             *         "id": 5,
             *         "parentContainerSizeId": 6,
             *         "containedMenuItemId": 7,
             *         "containedMenuItemSizeId": 8,
             *         "quantity": 9
             *       }
             *     ]
             */
            definedContainerItemDtos?: components["schemas"]["UpdateChildMenuItemContainerItemDto"][];
            /**
             * @description options for the menuItem if it serves as a container to other items. Sets rules like valid items and item sizes, and quantity of the container. Pass a null value to remove container options
             * @example {
             *       "mode": "create",
             *       "containerRuleDtos": [
             *         {
             *           "mode": "create",
             *           "validMenuItemId": 5,
             *           "validSizeIds": [
             *             6,
             *             7
             *           ]
             *         },
             *         {
             *           "mode": "update",
             *           "id": 8,
             *           "validMenuItemId": 9,
             *           "validSizeIds": [
             *             10,
             *             11
             *           ]
             *         }
             *       ],
             *       "validQuantity": 12
             *     }
             */
            containerOptionDto?: components["schemas"]["UpdateChildMenuItemContainerOptionsDto"];
        };
        CreateMenuItemContainerItemDto: {
            /**
             * @description Id of a MenuItem entity, the parent container to the child MenuItem component.
             * @example 1
             */
            parentContainerId: number;
            /**
             * @description Id of a MenuItemSize entity of the parent container
             * @example 2
             */
            parentContainerSizeId: number;
            /**
             * @description Id of a MenuItem entity. Represents the contained MenuItem item.
             * @example 3
             */
            containedMenuItemId: number;
            /**
             * @description Id of a MenuItemSize entity. The size of the contained item
             * @example 4
             */
            containedMenuItemSizeId: number;
            /**
             * @description The amount of MenuItem/MenuItemSize combination
             * @example 5
             */
            quantity: number;
        };
        UpdateMenuItemContainerItemDto: {
            /**
             * @description Id of a MenuItem entity. Represents the contained item.
             * @example 1
             */
            containedMenuItemId?: number;
            /**
             * @description Id of a MenuItemSize entity. The size of the contained item
             * @example 2
             */
            containedMenuItemSizeId?: number;
            /**
             * @description The amount of MenuItem/MenuItemSize combination
             * @example 3
             */
            quantity?: number;
        };
        CreateMenuItemContainerOptionsDto: {
            /**
             * @description Id of the MenuItem entity that the options apply to.
             * @example 1
             */
            parentContainerMenuItemId: number;
            /**
             * @description The list of MenuItems and their sizes that are allowed in the container
             * @example [
             *       {
             *         "mode": "create",
             *         "validMenuItemId": 2,
             *         "validSizeIds": [
             *           3,
             *           4
             *         ]
             *       },
             *       {
             *         "mode": "create",
             *         "validMenuItemId": 5,
             *         "validSizeIds": [
             *           6,
             *           7
             *         ]
             *       }
             *     ]
             */
            containerRuleDtos: components["schemas"]["CreateChildMenuItemContainerRuleDto"][];
            /**
             * @description The total size of the container. When ordered, the summation of ordermenuitemcomponents have to equal this value.
             * @example 8
             */
            validQuantity: number;
        };
        UpdateMenuItemContainerOptionsDto: {
            /**
             * @description The list of MenuItems and their sizes that are allowed in the container
             * @example [
             *       {
             *         "mode": "create",
             *         "validMenuItemId": 2,
             *         "validSizeIds": [
             *           3,
             *           4
             *         ]
             *       },
             *       {
             *         "mode": "update",
             *         "id": 5,
             *         "validMenuItemId": 6,
             *         "validSizeIds": [
             *           7,
             *           8
             *         ]
             *       }
             *     ]
             */
            containerRuleDtos?: components["schemas"]["CreateChildMenuItemContainerRuleDto"][];
            /**
             * @description The total size of the container. When ordered, the summation of OrderMenuItemComponents have to equal this value.
             * @example 1
             */
            validQuantity?: number;
        };
        CreateMenuItemContainerRuleDto: {
            /**
             * @description Id of the MenuItemContainerOptions entity.
             * @example 1
             */
            parentContainerOptionsId: number;
            /**
             * @description Id of a MenuItem entity that is a valid component
             * @example 2
             */
            validMenuItemId: number;
            /**
             * @description Id of a MenuItemSize entity that is a valid size to the validMenuItem, and to the container
             * @example [
             *       3,
             *       4
             *     ]
             */
            validSizeIds: string[];
        };
        UpdateMenuItemContainerRuleDto: {
            /**
             * @description Id of a MenuItem entity that is a valid component
             * @example 1
             */
            validMenuItemId?: number;
            /**
             * @description Id of a MenuItemSize entity that is a valid size to the validMenuItem, and to the container
             * @example [
             *       2,
             *       3
             *     ]
             */
            validSizeIds?: string[];
        };
        Template: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description Name of the template
             * @example Spring Pies
             */
            templateName: string;
            /**
             * @description Differentiates whether the template is for pie products or not.
             * @example true
             */
            isPie: boolean;
            /**
             * @description A list of template items representing the rows of the printed template
             * @example [
             *       {
             *         "id": 1,
             *         "displayName": "CLAPPLE",
             *         "menuItem": {
             *           "id": 1,
             *           "itemname": "Classic Apple",
             *           "category": {},
             *           "validSizes": [
             *             {
             *               "id": 1,
             *               "name": "medium"
             *             }
             *           ],
             *           "definedContainerItems": [
             *             {}
             *           ],
             *           "containerOptions": {}
             *         },
             *         "tablePosIndex": 0,
             *         "parentTemplate": {}
             *       }
             *     ]
             */
            templateItems: components["schemas"]["TemplateMenuItem"][];
        };
        TemplateMenuItem: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description Name to be printed on document representing the MenuItem
             * @example CLAPPLE
             */
            displayName: string;
            /**
             * @description The item being represented in the template item (as a row on the template)
             * @example {
             *       "id": 1,
             *       "itemname": "Classic Apple",
             *       "category": {},
             *       "validSizes": [
             *         {
             *           "id": 1,
             *           "name": "medium"
             *         }
             *       ],
             *       "definedContainerItems": [
             *         {}
             *       ],
             *       "containerOptions": {}
             *     }
             */
            menuItem: components["schemas"]["MenuItem"];
            /**
             * @description The index specifying the row order of this template item on the template (0 being the first row at the top ignoring the header row)
             * @example 0
             */
            tablePosIndex: number;
            /**
             * @description The template this template item is for
             * @example {
             *       "id": 1,
             *       "templateName": "Summer Pies",
             *       "isPie": true,
             *       "templateItems": [
             *         {}
             *       ]
             *     }
             */
            parentTemplate: components["schemas"]["Template"];
        };
        CreateChildTemplateMenuItemDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating a Template entity.
             * @example create
             */
            mode: string;
            /**
             * @description Name to be used on the baking list representing the referenced MenuItem.
             * @example BLUE
             */
            displayName: string;
            /**
             * @description Id of the MenuItem entity being displayed on the Template.
             * @example 1
             */
            menuItemId: number;
            /**
             * @description The row position of the TemplateMenuItem on the parent Template.
             * @example 0
             */
            tablePosIndex: number;
        };
        CreateTemplateDto: {
            /**
             * @description Name of the Template entity.
             * @example Summer Pies
             */
            templateName: string;
            /**
             * @description If the template displays a list of pies. Templates display either Pies or Pastries.
             * @example false
             */
            isPie?: boolean;
            /**
             * @description Array of CreateChildTemplateMenuItemDtos, child dtos are used when creating a Template entity with child TemplateMenuItem entites.
             * @example [
             *       {
             *         "mode": "create",
             *         "displayName": "CLAPPLE",
             *         "menuItemId": 1,
             *         "tablePosIndex": 0
             *       },
             *       {
             *         "mode": "create",
             *         "displayName": "MIX",
             *         "menuItemId": 2,
             *         "tablePosIndex": 1
             *       }
             *     ]
             */
            templateItemDtos?: components["schemas"]["CreateChildTemplateMenuItemDto"][];
        };
        UpdateChildTemplateMenuItemDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating a Template entity.
             * @example update
             */
            mode: string;
            /**
             * @description Id of the TemplateMenuItem entity to be updated.
             * @example 1
             */
            id: number;
            /**
             * @description Name to be used on the baking list representing the referenced MenuItem.
             * @example CRUMB
             */
            displayName?: string;
            /**
             * @description Id of the MenuItem entity being displayed on the Template.
             * @example 2
             */
            menuItemId?: number;
            /**
             * @description The row position of the TemplateMenuItem on the parent Template.
             * @example 3
             */
            tablePosIndex?: number;
        };
        UpdateTemplateDto: {
            /**
             * @description Name of the Template entity.
             * @example Spring Pastries
             */
            templateName?: string;
            /**
             * @description If the template displays a list of pies. Templates display either Pies or Pastries.
             * @example false
             */
            isPie?: boolean;
            /**
             * @description Mixed array of CreateChildTemplateMenuItemDtos and UpdateChildTemplateMenuItemDto, child dtos are used when updating a Template entity with created/updated child TemplateMenuItem entites.
             * @example [
             *       {
             *         "mode": "create",
             *         "displayName": "CLAPPLE",
             *         "menuItemId": 1,
             *         "tablePosIndex": 0
             *       },
             *       {
             *         "mode": "update",
             *         "id": 3,
             *         "displayName": "MIX",
             *         "menuItemId": 2,
             *         "tablePosIndex": 1
             *       }
             *     ]
             */
            templateItemDtos?: components["schemas"]["UpdateChildTemplateMenuItemDto"][];
        };
        CreateTemplateMenuItemDto: {
            /**
             * @description Name to be used on the baking list representing the referenced MenuItem.
             * @example CBP
             */
            displayName: string;
            /**
             * @description Id of the MenuItem entity being displayed on the Template.
             * @example 1
             */
            menuItemId: number;
            /**
             * @description The row position of the TemplateMenuItem on the parent Template.
             * @example 0
             */
            tablePosIndex: number;
            /**
             * @description Id of the parent Template entity.
             * @example 2
             */
            templateId: number;
        };
        UpdateTemplateMenuItemDto: {
            /**
             * @description Name to be used on the baking list representing the referenced MenuItem.
             * @example POTM
             */
            displayName?: string;
            /**
             * @description Id of the MenuItem entity being displayed on the Template.
             * @example 1
             */
            menuItemId?: number;
            /**
             * @description The row position of the TemplateMenuItem on the parent Template.
             * @example 2
             */
            tablePosIndex?: number;
            /**
             * @description Id of the parent Template entity.
             * @example 3
             */
            templateId?: number;
        };
        LabelType: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description Name of the label type
             * @example 4x2
             */
            labelTypeName: string;
            /**
             * @description Length of the label in hundreths of an inch
             * @example 400
             */
            labelTypeLength: number;
            /**
             * @description Width of the label in hundreths of an inch
             * @example 200
             */
            labelTypeWidth: number;
        };
        Label: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description The MenuItem this label is for
             * @example {
             *       "id": 1,
             *       "itemname": "Classic Apple",
             *       "category": {},
             *       "validSizes": [
             *         {
             *           "id": 1,
             *           "name": "medium"
             *         }
             *       ],
             *       "definedContainerItems": [
             *         {}
             *       ],
             *       "containerOptions": {}
             *     }
             */
            menuItem: components["schemas"]["MenuItem"];
            /**
             * @description URL path to the stored image file
             * @example http://toMyImages.gov
             */
            imageUrl: string;
            /**
             * @description The label type describing size characteristics
             * @example {
             *       "id": 1,
             *       "labelTypeName": "4x2",
             *       "labelTypeLength": 400,
             *       "labelTypeWidth": 200
             *     }
             */
            labelType: components["schemas"]["LabelType"];
        };
        CreateLabelDto: {
            /**
             * @description Id of MenuItem entity.
             * @example 1
             */
            menuItemId: number;
            /**
             * @description URL to image on offsite storage.
             * @example label/url.com
             */
            imageUrl: string;
            /**
             * @description Id of LabelType entity.
             * @example 2
             */
            labelTypeId: number;
        };
        UpdateLabelDto: {
            /**
             * @description Id of MenuItem entity.
             * @example 1
             */
            menuItemId?: number;
            /**
             * @description URL to image on offsite storage.
             * @example url/image.com
             */
            imageUrl?: string;
            /**
             * @description Id of LabelType entity.
             * @example 2
             */
            labelTypeId?: number;
        };
        CreateLabelTypeDto: {
            /**
             * @description Name of the LabelType entity.
             * @example 4x2
             */
            labelTypeName: string;
            /**
             * @description The length of the label type in hundreths of an inch
             * @example 400
             */
            labelTypeLength: number;
            /**
             * @description The length of the label type in hundreths of an inch
             * @example 200
             */
            labelTypeWidth: number;
        };
        UpdateLabelTypeDto: {
            /**
             * @description Name of the LabelType entity.
             * @example 2x1
             */
            labelTypeName?: string;
            /**
             * @description The length of the label type in hundreths of an inch
             * @example 200
             */
            labelTypeLength?: number;
            /**
             * @description The length of the label type in hundreths of an inch
             * @example 100
             */
            labelTypeWidth?: number;
        };
        InventoryArea: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description The name of the area
             * @example dry storage
             */
            areaName: string;
            /**
             * @description A list of inventory counts performed within the area
             * @example {
             *       "id": 1,
             *       "countDate": "2025-06-28T21:21:08.633Z",
             *       "inventoryArea": {},
             *       "countedItems": [
             *         {}
             *       ]
             *     }
             */
            inventoryCounts: components["schemas"]["InventoryAreaCount"][];
        };
        InventoryItemCategory: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description Name of the category
             * @example Produce
             */
            categoryName: string;
            /**
             * @description List of items referencing the category instance
             * @example [
             *       {
             *         "id": 1,
             *         "itemName": "flour",
             *         "category": {},
             *         "vendor": {},
             *         "itemSizes": [
             *           {}
             *         ]
             *       }
             *     ]
             */
            categoryItems: components["schemas"]["InventoryItem"][];
        };
        InventoryItemVendor: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description Name of the vendor
             * @example Dollar Tree
             */
            vendorName: string;
            /**
             * @description InventoryItems from the vendor
             * @example [
             *       {
             *         "id": 1,
             *         "itemName": "flour",
             *         "category": {},
             *         "vendor": {},
             *         "itemSizes": [
             *           {}
             *         ]
             *       }
             *     ]
             */
            vendorItems: components["schemas"]["InventoryItem"][];
        };
        UnitOfMeasureCategory: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description Name of the category
             * @example Volume
             */
            categoryName: string;
            /**
             * @description List of units of measure under the category
             * @example [
             *       {
             *         "id": 1,
             *         "name": "pound",
             *         "abbreviation": "lbs",
             *         "category": {}
             *       }
             *     ]
             */
            unitsOfMeasure: components["schemas"]["UnitOfMeasure"][];
            /**
             * @description The designated unit all other units under this category use for conversions.
             * @example {
             *       "id": 1,
             *       "name": "pound",
             *       "abbreviation": "lbs",
             *       "category": {}
             *     }
             */
            baseConversionUnit?: components["schemas"]["UnitOfMeasure"];
        };
        UnitOfMeasure: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /** @example  */
            name: string;
            /** @example  */
            abbreviation: string;
            /** @example {
             *       "id": 1,
             *       "categoryName": "Weight",
             *       "unitsOfMeasure": [
             *         {}
             *       ]
             *     } */
            category?: components["schemas"]["UnitOfMeasureCategory"];
            /** @example  */
            conversionFactorToBase?: string;
        };
        InventoryItemPackage: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description Name description of a package type
             * @example Box
             */
            packageName: string;
        };
        InventoryItemSize: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description The measure quantity of the measureUnit property
             * @example 8
             */
            measureAmount: number;
            /**
             * @description The unit of measure scaling the measureAmount property
             * @example {
             *       "id": 1,
             *       "name": "pound",
             *       "abbreviation": "lbs",
             *       "category": {
             *         "id": 1,
             *         "categoryName": "Weight",
             *         "unitsOfMeasure": [
             *           {}
             *         ]
             *       }
             *     }
             */
            measureUnit: components["schemas"]["UnitOfMeasure"];
            /**
             * @description The type of package for this item's size.
             * @example {
             *       "id": 1,
             *       "packageName": "box"
             *     }
             */
            packageType: components["schemas"]["InventoryItemPackage"];
            /**
             * @description The inventoryitem associated with this InventoryItemSize
             * @example {
             *       "id": 1,
             *       "itemName": "flour",
             *       "category": {},
             *       "vendor": {},
             *       "itemSizes": [
             *         {}
             *       ]
             *     }
             */
            inventoryItem: components["schemas"]["InventoryItem"];
            /**
             * @description The cost for this inventory item / size combination
             * @example 8.49
             */
            cost: string;
        };
        InventoryItem: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /** @example  */
            itemName: string;
            /**
             * @description The assigned category
             * @example {
             *       "id": 1,
             *       "categoryName": "dry goods",
             *       "categoryItems": [
             *         {}
             *       ]
             *     }
             */
            category?: components["schemas"]["InventoryItemCategory"] | null;
            /**
             * @description The assigned Vendor
             * @example {
             *       "id": 1,
             *       "vendorName": "shaws",
             *       "vendorItems": [
             *         {}
             *       ]
             *     }
             */
            vendor?: components["schemas"]["InventoryItemVendor"] | null;
            /**
             * @description The size options to the item
             * @example [
             *       {
             *         "id": 1,
             *         "measureAmount": 2,
             *         "measureUnit": {
             *           "id": 1,
             *           "name": "pound",
             *           "abbreviation": "lbs",
             *           "category": {}
             *         },
             *         "packageType": {
             *           "id": 1,
             *           "packageName": "box"
             *         },
             *         "inventoryItem": {},
             *         "cost": "18.99"
             *       }
             *     ]
             */
            itemSizes: components["schemas"]["InventoryItemSize"][];
        };
        InventoryAreaItem: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description The inventory count this item was recorded
             * @example {
             *       "id": 1,
             *       "countDate": "2025-06-28T21:21:08.633Z",
             *       "inventoryArea": {},
             *       "countedItems": [
             *         {}
             *       ]
             *     }
             */
            parentInventoryCount: components["schemas"]["InventoryAreaCount"];
            /**
             * @description The inventory item that was recorded
             * @example {
             *       "id": 1,
             *       "itemName": "flour",
             *       "category": {},
             *       "vendor": {},
             *       "itemSizes": [
             *         {}
             *       ]
             *     }
             */
            countedItem: components["schemas"]["InventoryItem"];
            /**
             * @description The unit amount of the recorded inventory item / size combination
             * @example 1
             */
            amount: number;
            /**
             * @description The size of the inventory item recorded
             * @example {
             *       "id": 1,
             *       "measureAmount": 2,
             *       "measureUnit": {
             *         "id": 1,
             *         "name": "pound",
             *         "abbreviation": "lbs",
             *         "category": {}
             *       },
             *       "packageType": {
             *         "id": 1,
             *         "packageName": "box"
             *       },
             *       "inventoryItem": {},
             *       "cost": "18.99"
             *     }
             */
            countedItemSize: components["schemas"]["InventoryItemSize"];
        };
        InventoryAreaCount: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * Format: date-time
             * @description The date the count was taken
             * @example 2025-06-05T23:00:17.814Z
             */
            countDate: string;
            /**
             * @description The area where the count was taken
             * @example {
             *       "id": 1,
             *       "areaName": "dry storage",
             *       "inventoryCounts": [
             *         {}
             *       ]
             *     }
             */
            inventoryArea: components["schemas"]["InventoryArea"];
            /**
             * @description Inventory items that were recorded during the count.
             * @example [
             *       {
             *         "id": 1,
             *         "parentInventoryCount": {},
             *         "countedItem": {
             *           "id": 1,
             *           "itemName": "flour",
             *           "category": {},
             *           "vendor": {},
             *           "itemSizes": [
             *             {}
             *           ]
             *         },
             *         "amount": 1,
             *         "countedItemSize": {
             *           "id": 1,
             *           "measureAmount": 2,
             *           "measureUnit": {
             *             "id": 1,
             *             "name": "pound",
             *             "abbreviation": "lbs",
             *             "category": {}
             *           },
             *           "packageType": {
             *             "id": 1,
             *             "packageName": "box"
             *           },
             *           "inventoryItem": {},
             *           "cost": "18.99"
             *         }
             *       }
             *     ]
             */
            countedItems: components["schemas"]["InventoryAreaItem"];
        };
        CreateInventoryAreaDto: {
            /**
             * @description Name of the InventoryArea.
             * @example Dry Storage
             */
            areaName: string;
        };
        UpdateInventoryAreaDto: {
            /**
             * @description Name of the InventoryArea.
             * @example Dry Storage
             */
            areaName?: string;
        };
        CreateInventoryAreaCountDto: {
            /**
             * @description Id for InventoryArea entity.
             * @example 1
             */
            inventoryAreaId: number;
        };
        UpdateInventoryAreaCountDto: {
            /**
             * @description Id for Inventory-Area entity.
             * @example 1
             */
            inventoryAreaId?: number;
        };
        CreateChildInventoryItemSizeDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating an InventoryItem entity.
             * @example create
             */
            mode: string;
            /**
             * @description Id of UnitofMeasure entity.
             * @example 1
             */
            measureUnitId: number;
            /**
             * @description the unit quantity of the UnitofMeasure entity.
             * @example 10
             */
            measureAmount: number;
            /**
             * @description Id of InventoryItemPackage entity.
             * @example 2
             */
            inventoryPackageId: number;
            /**
             * @description Price paid for the InventoryItem entity.
             * @example 3.99
             */
            cost: number;
        };
        CreateInventoryAreaItemDto: {
            /**
             * @description Id for InventoryAreaCount entity.
             * @example 1
             */
            parentInventoryCountId: number;
            /**
             * @description Id for InventoryItem entity.
             * @example 2
             */
            countedInventoryItemId: number;
            /**
             * @description The amount of InventoryItem per unit.
             * @example 6
             */
            countedAmount: number;
            /**
             * @description Id for InventoryItemSize entity. If countedItemSizeId is null, countedItemSizeDto must be populated.
             * @example 3
             */
            countedItemSizeId: number;
            /**
             * @description Is optional, if countedItemSizeDto is null, countedItemSizeId must be populated.
             * @example {
             *       "mode": "create",
             *       "measureUnitId": 1,
             *       "measureAmount": 2,
             *       "inventoryPackageId": 3,
             *       "cost": 4.99
             *     }
             */
            countedItemSizeDto: components["schemas"]["CreateChildInventoryItemSizeDto"];
        };
        UpdateChildInventoryItemSizeDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating an InventoryItem entity.
             * @example update
             */
            mode: string;
            /**
             * @description Id of InventoryItemSize entity to be updated.
             * @example 1
             */
            id: number;
            /**
             * @description Id of UnitofMeasure entity.
             * @example 2
             */
            measureUnitId?: number;
            /**
             * @description the unit quantity of the UnitofMeasure entity.
             * @example 10
             */
            measureAmount?: number;
            /**
             * @description Id of InventoryItemPackage entity.
             * @example 3
             */
            inventoryPackageId?: number;
            /**
             * @description Price paid for the InventoryItem entity.
             * @example 4.99
             */
            cost?: number;
        };
        UpdateInventoryAreaItemDto: {
            /**
             * @description Id for InventoryItem entity.
             * @example 1
             */
            countedInventoryItemId?: components["schemas"]["InventoryItem"];
            /**
             * @description The amount of InventoryItem per unit.
             * @example 6
             */
            countedAmount?: number;
            /**
             * @description Id for InventoryItemSize entity. If countedItemSizeId is populated, countedItemSizeDto must be null/undefined.
             * @example 2
             */
            countedItemSizeId?: number;
            /**
             * @description If countedItemSizeDto is populated, countedItemSizeId must be null/undefined.
             * @example {
             *       "mode": "update",
             *       "id": 5,
             *       "measureUnitId": 1,
             *       "measureAmount": 2,
             *       "inventoryPackageId": 3,
             *       "cost": 4.99
             *     }
             */
            countedItemSizeDto?: components["schemas"]["UpdateChildInventoryItemSizeDto"];
        };
        CreateInventoryItemDto: {
            /**
             * @description Name of InventoryItem entity.
             * @example Evaporated Milk
             */
            itemName: string;
            /**
             * @description Id of InventoryItemCategory entity.
             * @example 1
             */
            inventoryItemCategoryId?: number | null;
            /**
             * @description Id of InventoryItemVendor entity.
             * @example 2
             */
            vendorId?: number | null;
            /**
             * @description Child dtos are used when creating/updating an entity through a parent (InventoryItem).
             * @example [
             *       {
             *         "mode": "create",
             *         "measureUnitId": 1,
             *         "measureAmount": 2,
             *         "inventoryPackageId": 3,
             *         "cost": 4.99
             *       }
             *     ]
             */
            itemSizeDtos?: components["schemas"]["CreateChildInventoryItemSizeDto"][] | null;
        };
        UpdateInventoryItemDto: {
            /**
             * @description Name of InventoryItem entity.
             * @example Sliced Almonds
             */
            itemName?: string;
            /**
             * @description Id of InventoryItemCategory entity.
             * @example 1
             */
            inventoryItemCategoryId?: number | null;
            /**
             * @description Id of InventoryItemVendor entity.
             * @example 2
             */
            vendorId?: number | null;
            /**
             * @description Mixed array of CreateChildInventoryItemSizeDtos and UpdateChildInventoryItemSizeDtos. Child dtos are used when creating/updating an entity through a parent (InventoryItem).
             * @example [
             *       {
             *         "mode": "create",
             *         "measureUnitId": 1,
             *         "measureAmount": 2,
             *         "inventoryPackageId": 3,
             *         "cost": 4.99
             *       },
             *       {
             *         "mode": "update",
             *         "id": 5,
             *         "measureUnitId": 6,
             *         "measureAmount": 7,
             *         "inventoryPackageId": 8,
             *         "cost": 9.99
             *       }
             *     ]
             */
            itemSizeDtos?: unknown[][] | null;
            /**
             * @description Price paid for the InventoryItem entity.
             * @example 5.99
             */
            cost?: number | null;
        };
        CreateInventoryItemCategoryDto: {
            /**
             * @description Name of InventoryItemCategory entity.
             * @example Dairy
             */
            itemCategoryName: string;
        };
        UpdateInventoryItemCategoryDto: {
            /**
             * @description Name of InventoryItemCategory entity.
             * @example Dry Goods
             */
            itemCategoryName?: string;
        };
        CreateInventoryItemPackageDto: {
            /**
             * @description Name for InventoryItemPackage entity.
             * @example Box
             */
            packageName: string;
        };
        UpdateInventoryItemPackageDto: {
            /**
             * @description Name for InventoryItemPackage entity.
             * @example Can
             */
            packageName?: string;
        };
        CreateInventoryItemSizeDto: {
            /**
             * @description Id of InventoryItem entity.
             * @example 1
             */
            inventoryItemId: components["schemas"]["InventoryItem"][];
            /**
             * @description Id of UnitofMeasure entity.
             * @example 2
             */
            measureUnitId: number;
            /**
             * @description the unit quantity of the UnitofMeasure entity.
             * @example 10
             */
            measureAmount: number;
            /**
             * @description Id of InventoryItemPackage entity.
             * @example 3
             */
            inventoryPackageId: number;
            /**
             * @description Price paid for the InventoryItem entity.
             * @example 4.99
             */
            cost: number;
        };
        CreateInventoryItemVendorDto: {
            /**
             * @description Name of InventoryItemVendor entity.
             * @example Cysco
             */
            vendorName: string;
        };
        UpdateInventoryItemVendorDto: {
            /**
             * @description Name of InventoryItemVendor entity.
             * @example Driscols
             */
            vendorName?: string;
        };
        CreateUnitOfMeasureDto: {
            /**
             * @description Name of the UnitofMeasure entity.
             * @example Pound
             */
            unitName: string;
            /**
             * @description abbrieviation of the UnitofMeasure entity's name.
             * @example lb
             */
            abbreviation: string;
            /**
             * @description Id of the UnitofMeasureCategory entity that the UnitofMeasure falls under.
             * @example 1
             */
            categoryId?: number;
            /**
             * @description The conversion factor stored as a string to prevent rounding errors, to the base amount.
             * @example 3785.4080001023799014
             */
            conversionFactorToBase?: string;
        };
        UpdateUnitOfMeasureDto: {
            /**
             * @description Name of the UnitofMeasure entity.
             * @example Kilogram
             */
            unitName?: string;
            /**
             * @description abbrieviation of the UnitofMeasure entity's name.
             * @example kg
             */
            abbreviation?: string;
            /**
             * @description Id of the UnitofMeasureCategory entity that the UnitofMeasure falls under.
             * @example 1
             */
            categoryId?: Record<string, never>;
            /**
             * @description The conversion factor stored as a string to prevent rounding errors, to the base amount.
             * @example 3785.4080001023799014
             */
            conversionFactorToBase?: string;
        };
        CreateUnitOfMeasureCategoryDto: {
            /**
             * @description Name of UnitCategory entity.
             * @example Weight
             */
            categoryName: string;
            /**
             * @description The UnitOfMeasure entity that all UnitofMeasure entities under the category convert to as part of conversions.
             * @example 1
             */
            baseUnitId?: number;
        };
        UpdateUnitOfMeasureCategoryDto: {
            /**
             * @description Name of UnitCategory entity.
             * @example Volume
             */
            categoryName?: string;
            /**
             * @description The UnitOfMeasure entity that all UnitofMeasure entities under the category convert to as part of conversions.
             * @example 1
             */
            baseUnitId?: Record<string, never>;
        };
        RecipeSubCategory: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description Name of the subcategory
             * @example Savory Pie
             */
            subCategoryName: string;
            /**
             * @description Category this subcategory is for
             * @example {
             *       "id": 1,
             *       "categoryName": "Pie",
             *       "subCategories": [
             *         {}
             *       ],
             *       "recipes": [
             *         {}
             *       ]
             *     }
             */
            parentCategory: components["schemas"]["RecipeCategory"];
            /**
             * @description List of Recipes under the subcategory
             * @example [
             *       {
             *         "id": 1,
             *         "recipeName": "Classic Apple Pie",
             *         "producedMenuItem": {
             *           "id": 1,
             *           "itemname": "Classic Apple",
             *           "category": {},
             *           "validSizes": [
             *             {
             *               "id": 1,
             *               "name": "medium"
             *             }
             *           ],
             *           "definedContainerItems": [
             *             {}
             *           ],
             *           "containerOptions": {}
             *         },
             *         "isIngredient": false,
             *         "ingredients": [
             *           {}
             *         ],
             *         "batchResultQuantity": 2,
             *         "batchResultUnitOfMeasurement": {
             *           "id": 1,
             *           "name": "pound",
             *           "abbreviation": "lbs",
             *           "category": {}
             *         },
             *         "servingSizeQuantity": 3,
             *         "servingSizeUnitOfMeasurement": {
             *           "id": 1,
             *           "name": "pound",
             *           "abbreviation": "lbs",
             *           "category": {}
             *         },
             *         "salesPrice": "3.99",
             *         "category": {},
             *         "subCategory": {}
             *       }
             *     ]
             */
            recipes: components["schemas"]["Recipe"][];
        };
        RecipeCategory: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description The name of the category
             * @example Pie
             */
            categoryName: string;
            /**
             * @description List of subcategories under the category
             * @example [
             *       {
             *         "id": 1,
             *         "subCategoryName": "Savory Pie",
             *         "parentCategory": {},
             *         "recipes": [
             *           {}
             *         ]
             *       }
             *     ]
             */
            subCategories: components["schemas"]["RecipeSubCategory"][];
            /**
             * @description List of recipes under the category
             * @example [
             *       {
             *         "id": 1,
             *         "recipeName": "Classic Apple Pie",
             *         "producedMenuItem": {
             *           "id": 1,
             *           "itemname": "Classic Apple",
             *           "category": {},
             *           "validSizes": [
             *             {
             *               "id": 1,
             *               "name": "medium"
             *             }
             *           ],
             *           "definedContainerItems": [
             *             {}
             *           ],
             *           "containerOptions": {}
             *         },
             *         "isIngredient": false,
             *         "ingredients": [
             *           {}
             *         ],
             *         "batchResultQuantity": 2,
             *         "batchResultUnitOfMeasurement": {
             *           "id": 1,
             *           "name": "pound",
             *           "abbreviation": "lbs",
             *           "category": {}
             *         },
             *         "servingSizeQuantity": 3,
             *         "servingSizeUnitOfMeasurement": {
             *           "id": 1,
             *           "name": "pound",
             *           "abbreviation": "lbs",
             *           "category": {}
             *         },
             *         "salesPrice": "3.99",
             *         "category": {},
             *         "subCategory": {}
             *       }
             *     ]
             */
            recipes: components["schemas"]["Recipe"][];
        };
        Recipe: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description Name of the recipe
             * @example Apple Mix
             */
            recipeName: string;
            /**
             * @description The referenced MenuItem if this recipe produces one.
             * @example {
             *       "id": 1,
             *       "itemname": "Classic Apple",
             *       "category": {},
             *       "validSizes": [
             *         {
             *           "id": 1,
             *           "name": "medium"
             *         }
             *       ],
             *       "definedContainerItems": [
             *         {}
             *       ],
             *       "containerOptions": {}
             *     }
             */
            producedMenuItem?: components["schemas"]["MenuItem"] | null;
            /**
             * @description A flag for if a recipe is used as an ingredient in other recipes
             * @example false
             */
            isIngredient: boolean;
            /**
             * @description A list of ingredients for the recipe
             * @example [
             *       {
             *         "id": 1,
             *         "parentRecipe": {},
             *         "ingredientInventoryItem": {
             *           "id": 1,
             *           "itemName": "flour",
             *           "category": {},
             *           "vendor": {},
             *           "itemSizes": [
             *             {}
             *           ]
             *         },
             *         "ingredientRecipe": null,
             *         "quantity": 2,
             *         "quantityMeasure": {
             *           "id": 1,
             *           "name": "pound",
             *           "abbreviation": "lbs",
             *           "category": {}
             *         }
             *       }
             *     ]
             */
            ingredients: components["schemas"]["RecipeIngredient"][];
            /**
             * Format: decimal
             * @description The total unit amout of the batchResultUnitOfMeaure property produced by the recipe.
             * @example 3
             */
            batchResultQuantity?: number | null;
            /**
             * @description The unit of measure that descibes the total yield the recipe produces.
             * @example {
             *       "id": 1,
             *       "name": "pound",
             *       "abbreviation": "lbs",
             *       "category": {}
             *     }
             */
            batchResultMeasurement?: components["schemas"]["UnitOfMeasure"] | null;
            /**
             * Format: decimal
             * @description A unit amount of the servingSizeUnitOfMeasure property that is a subset of the batchResultQuantity property.
             * @example 4
             */
            servingSizeQuantity?: number | null;
            /**
             * @description The unit of measure that describes the total sellable portions of the recipes yield
             * @example {
             *       "id": 1,
             *       "name": "pound",
             *       "abbreviation": "lbs",
             *       "category": {}
             *     }
             */
            servingSizeMeasurement?: components["schemas"]["UnitOfMeasure"] | null;
            /**
             * Format: decimal
             * @description The set price per servingSizeQuantity.
             * @example 34.99
             */
            salesPrice?: number | null;
            /**
             * @description The category of the recipe
             * @example {
             *       "id": 1,
             *       "categoryName": "Pie",
             *       "subCategories": [
             *         {}
             *       ],
             *       "recipes": [
             *         {}
             *       ]
             *     }
             */
            category?: components["schemas"]["RecipeCategory"] | null;
            /**
             * @description The sub category of the recipe
             * @example {
             *       "id": 1,
             *       "subCategoryName": "Savory Pie",
             *       "parentCategory": {},
             *       "recipes": [
             *         {}
             *       ]
             *     }
             */
            subCategory?: components["schemas"]["RecipeSubCategory"] | null;
        };
        RecipeIngredient: {
            /**
             * @description The unique identifier of the entity
             * @example 1
             */
            id: number;
            /**
             * @description Recipe the ingredient is for
             * @example {
             *       "id": 1,
             *       "recipeName": "Classic Apple Pie",
             *       "producedMenuItem": {
             *         "id": 1,
             *         "itemname": "Classic Apple",
             *         "category": {},
             *         "validSizes": [
             *           {
             *             "id": 1,
             *             "name": "medium"
             *           }
             *         ],
             *         "definedContainerItems": [
             *           {}
             *         ],
             *         "containerOptions": {}
             *       },
             *       "isIngredient": false,
             *       "ingredients": [
             *         {}
             *       ],
             *       "batchResultQuantity": 2,
             *       "batchResultUnitOfMeasurement": {
             *         "id": 1,
             *         "name": "pound",
             *         "abbreviation": "lbs",
             *         "category": {}
             *       },
             *       "servingSizeQuantity": 3,
             *       "servingSizeUnitOfMeasurement": {
             *         "id": 1,
             *         "name": "pound",
             *         "abbreviation": "lbs",
             *         "category": {}
             *       },
             *       "salesPrice": "3.99",
             *       "category": {},
             *       "subCategory": {}
             *     }
             */
            parentRecipe: components["schemas"]["Recipe"];
            /**
             * @description The InventoryItem this ingredient uses, if this property is referenced, ingredientRecipe property must be null.
             * @example {
             *       "id": 1,
             *       "itemName": "flour",
             *       "category": {},
             *       "vendor": {},
             *       "itemSizes": [
             *         {}
             *       ]
             *     }
             */
            ingredientInventoryItem?: components["schemas"]["InventoryItem"];
            /**
             * @description The Recipe this ingredient uses, if this property is referenced, ingredientInventoryItem must be null.
             * @example null
             */
            ingredientRecipe?: components["schemas"]["Recipe"];
            /**
             * @description the numberical value of the quantityMeasure property of the ingredient
             * @example 3.5
             */
            quantity: number;
            /**
             * @description The unit of measure for the ingredient
             * @example {
             *       "id": 1,
             *       "name": "pound",
             *       "abbreviation": "lbs",
             *       "category": {
             *         "id": 1,
             *         "categoryName": "Weight",
             *         "unitsOfMeasure": [
             *           {}
             *         ]
             *       }
             *     }
             */
            quantityMeasure: components["schemas"]["UnitOfMeasure"];
        };
        CreateChildRecipeIngredientDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating a Recipe entity.
             * @example create
             */
            mode: string;
            /**
             * @description Id of InventoryItem used as the ingredient, is optional. If inventoryItemId is null, subRecipeIngredientId must be populated, both cannot be populated.
             * @example 10
             */
            ingredientInventoryItemId?: number;
            /**
             * @description Id of Recipe entity being used as a recipe ingredient, is optional. If subRecipeIngredientId is null, inventoryItemId must be populated, both cannot be populated.
             * @example 1
             */
            ingredientRecipeId?: number;
            /**
             * @description The unit amount of the UnitofMeasure of the InventoryItem
             * @example 2
             */
            quantity: number;
            /**
             * @description Id of the UnitofMeasure entity.
             * @example 3
             */
            quantityMeasurementId: number;
        };
        CreateRecipeDto: {
            /**
             * @description Name of the Recipe entity.
             * @example Blueberry Pie
             */
            recipeName: string;
            /**
             * @description Id of the MenuItem that the recipe produces.
             * @example 1
             */
            producedMenuItemId?: number;
            /**
             * @description If the recipe is used as an ingredient.(Not sold directly)
             * @example false
             */
            isIngredient?: boolean;
            /**
             * Format: decimal
             * @description The unit amount the recipe produces of the referenced BatchUnitOfMeasure UnitofMeasure entity.
             * @example 2
             */
            batchResultQuantity?: number;
            /**
             * @description Id of the UnitofMeasure entity expressing the unit size of what the recipe produces.
             * @example 3
             */
            batchResultMeasurementId: number;
            /**
             * Format: decimal
             * @description The unit amount of the servingSizeUnitOfMeasure describing the amount that is sold.
             * @example 4
             */
            servingSizeQuantity?: number;
            /**
             * @description Id of the UnitofMeasure used to represent the unit size of what is sold.
             * @example 5
             */
            servingSizeMeasurementId: number;
            /**
             * Format: decimal
             * @description The price of purchasing the serving size amount.
             * @example 6
             */
            salesPrice?: number;
            /**
             * @description Id of the RecipeCategory entity
             * @example 7
             */
            categoryId?: number;
            /**
             * @description Id of the RecipeSubCategory entity. Must be a child subcategory to the referenced RecipeCategory
             * @example 8
             */
            subCategoryId?: number;
            /**
             * @description Array of CreateChildRecipeIngredientDtos. Child dtos are used when creating child RecipeIngredient entites through creating the Recipe entity.
             * @example [
             *       {
             *         "mode": "create",
             *         "ingredientInventoryItemId": 1,
             *         "ingredientRecipeId": null,
             *         "quantity": 2,
             *         "quantityMeasurementId": 3
             *       },
             *       {
             *         "mode": "create",
             *         "ingredientInventoryItemId": null,
             *         "ingredientRecipeId": 4,
             *         "quantity": 5,
             *         "quantityMeasurementId": 6
             *       }
             *     ]
             */
            ingredientDtos?: components["schemas"]["CreateChildRecipeIngredientDto"][];
        };
        UpdateChildRecipeIngredientDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating a Recipe entity.
             * @example update
             */
            mode: string;
            /**
             * @description Id of the RecipeIngredient to update
             * @example 1
             */
            id: number;
            /**
             * @description Id of InventoryItem used as the ingredient, is optional. If inventoryItemId is null, subRecipeIngredientId must be populated, both cannot be populated.
             * @example 2
             */
            ingredientInventoryItemId?: Record<string, never>;
            /**
             * @description Id of Recipe entity being used as a recipe ingredient, is optional. If subRecipeIngredientId is null, inventoryItemId must be populated, both cannot be populated.
             * @example 3
             */
            ingredientRecipeId?: Record<string, never>;
            /**
             * @description The unit amount of the UnitofMeasure of the InventoryItem
             * @example 4
             */
            quantity?: number;
            /**
             * @description Id of the UnitofMeasure entity.
             * @example 5
             */
            quantityMeasurementId?: number;
        };
        UpdateRecipeDto: {
            /**
             * @description Name of the Recipe entity.
             * @example Blueberry Pie
             */
            recipeName?: string;
            /**
             * @description Id of the MenuItem that the recipe produces.
             * @example Blueberry Pie
             */
            producedMenuItemId?: Record<string, never>;
            /**
             * @description If the recipe is used as an ingredient.(Not sold directly)
             * @example false
             */
            isIngredient?: boolean;
            /**
             * @description The unit amount the recipe produces of the referenced BatchUnitOfMeasure UnitofMeasure entity.
             * @example 1
             */
            batchResultQuantity?: Record<string, never>;
            /**
             * @description Id of the UnitofMeasure entity expressing the unit size of what the recipe produces.
             * @example 2
             */
            batchResultMeasurementId?: Record<string, never>;
            /**
             * @description The unit amount of the servingSizeUnitOfMeasure describing the amount that is sold.
             * @example 3
             */
            servingSizeQuantity?: Record<string, never>;
            /**
             * @description Id of the UnitofMeasure used to represent the unit size of what is sold.
             * @example 4
             */
            servingSizeMeasurementId?: Record<string, never>;
            /**
             * @description The price of purchasing the serving size amount.
             * @example 5.99
             */
            salesPrice?: Record<string, never>;
            /**
             * @description Id of the RecipeCategory entity
             * @example 6
             */
            categoryId?: Record<string, never>;
            /**
             * @description Id of the RecipeSubCategory entity. Must be a child subcategory to the referenced RecipeCategory
             * @example 7
             */
            subCategoryId?: Record<string, never>;
            /**
             * @description Mixed array of CreateChildRecipeIngredientDtos and UpdateChildRecipeIngredientDtos. Child dtos are used when creating/updating child RecipeIngredient entites through updating the Recipe entity.
             * @example [
             *       {
             *         "mode": "update",
             *         "id": 1,
             *         "ingredientInventoryItemId": 2,
             *         "ingredientRecipeId": null,
             *         "quantity": 3,
             *         "quantityMeasurementId": 4
             *       },
             *       {
             *         "mode": "create",
             *         "ingredientInventoryItemId": null,
             *         "ingredientRecipeId": 5,
             *         "quantity": 6,
             *         "quantityMeasurementId": 7
             *       }
             *     ]
             */
            ingredientDtos?: components["schemas"]["UpdateChildRecipeIngredientDto"][];
        };
        CreateChildRecipeSubCategoryDto: {
            /**
             * @description Declare whether creating or updating a child entity. Relevant when creating/updating a RecipeCategory entity.
             * @example create
             */
            mode: string;
            /**
             * @description Name of the RecipeSubCategory entity.
             * @example name
             */
            subCategoryName: string;
        };
        CreateRecipeCategoryDto: {
            /**
             * @description Name of the RecipeCategory entity.
             * @example Pies
             */
            categoryName: string;
            /**
             * @description Array of CreateChildRecipeSubCategoryDtos, child dtos are used when creating the parent RecipeCategory with child RecipeSubCategory entities.
             * @example [
             *       {
             *         "mode": "create",
             *         "subCategoryName": "savory pies"
             *       },
             *       {
             *         "mode": "create",
             *         "subCategoryName": "sweet pies"
             *       }
             *     ]
             */
            subCategoryDtos?: components["schemas"]["CreateChildRecipeSubCategoryDto"][];
        };
        UpdateRecipeCategoryDto: {
            /**
             * @description Name of the RecipeCategory entity.
             * @example Pies
             */
            categoryName?: string;
            /**
             * @description Mixed array of CreateChildRecipeSubCategoryDtos and UpdateChildRecipeSubCategoryDtos, child dtos are used when updating the parent RecipeCategory with created/updated child RecipeSubCategory entities.
             * @example [
             *       {
             *         "mode": "create",
             *         "subCategoryName": "savory pies"
             *       },
             *       {
             *         "mode": "update",
             *         "id": 1,
             *         "subCategoryName": "dessert pies"
             *       }
             *     ]
             */
            subCategoryDtos?: components["schemas"]["CreateChildRecipeSubCategoryDto"][];
        };
        CreateRecipeSubCategoryDto: {
            /**
             * @description Name of the RecipeSubCategory entity.
             * @example Sweet Pie
             */
            subCategoryName: string;
            /**
             * @description Id of the RecipeCategory parent entity.
             * @example 1
             */
            parentCategoryId: number;
        };
        UpdateRecipeSubCategoryDto: {
            /**
             * @description Name of the RecipeSubCategory entity.
             * @example name
             */
            subCategoryName?: string;
        };
        CreateRecipeIngredientDto: {
            /**
             * @description Id of the Recipe entity that is the parent
             * @example 1
             */
            parentRecipeId: number;
            /**
             * @description Id of InventoryItem used as the ingredient, is optional. If inventoryItemId is null, subRecipeIngredientId must be populated, both cannot be populated.
             * @example 2
             */
            ingredientInventoryItemId?: number;
            /**
             * @description Id of Recipe entity being used as a recipe ingredient, is optional. If subRecipeIngredientId is null, inventoryItemId must be populated, both cannot be populated.
             * @example 3
             */
            ingredientRecipeId?: number;
            /**
             * @description The unit amount of the UnitofMeasure of the InventoryItem
             * @example 4
             */
            quantity: number;
            /**
             * @description Id of the UnitofMeasure entity.
             * @example 5
             */
            quantityMeasurementId: number;
        };
        UpdateRecipeIngredientDto: {
            /**
             * @description The unit amount of the UnitofMeasure of the InventoryItem
             * @example 1
             */
            quantity?: number;
            /**
             * @description Id of the UnitofMeasure entity.
             * @example 2
             */
            quantityMeasurementId?: number;
            /**
             * @description Id of InventoryItem used as the ingredient, is optional. If inventoryItemId is null, subRecipeIngredientId must be populated, both cannot be populated.
             * @example 3
             */
            ingredientInventoryItemId?: Record<string, never>;
            /**
             * @description Id of Recipe entity being used as a recipe ingredient, is optional. If subRecipeIngredientId is null, inventoryItemId must be populated, both cannot be populated.
             * @example 4
             */
            ingredientRecipeId?: Record<string, never>;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_signIn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInDto"];
            };
        };
        responses: {
            /** @description Sign in successful. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponseDto"];
                };
            };
            /** @description Invalid credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - username */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["User"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    UserController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description User successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            /** @description User successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                     - roleName */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["Role"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    RoleController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRoleDto"];
            };
        };
        responses: {
            /** @description Role successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Role found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
            /** @description Role not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Role successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Role not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRoleDto"];
            };
        };
        responses: {
            /** @description Role successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Role to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *               - orderCategory name
                 *
                 *               - recipient
                 *
                 *               - fulfillmentDate
                 *
                 *               - createdAt */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                /** @description search by recipient name or orderItems menuItem name */
                search?: string;
                /** @description Filterable fields. Use format: field=value. Available filters:
                 *
                 *               - **orderCategory** (e.g., `orderCategory=5`) */
                filters?: string[];
                dateBy?: string;
                /** @description Start date (inclusive) in ISO format (e.g., 2025-05-01) */
                startDate?: string;
                /** @description End date (inclusive) in ISO format (e.g., 2025-05-31) */
                endDate?: string;
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["Order"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    OrderController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrderDto"];
            };
        };
        responses: {
            /** @description Order successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrderDto"];
            };
        };
        responses: {
            /** @description Order successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderCategoryController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - categoryName */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["OrderCategory"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    OrderCategoryController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrderCategoryDto"];
            };
        };
        responses: {
            /** @description Order Type successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderCategory"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderCategoryController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order Type found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderCategory"];
                };
            };
            /** @description Order Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderCategoryController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order Type successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderCategoryController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrderCategoryDto"];
            };
        };
        responses: {
            /** @description Order Type successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderCategory"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order Type to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderMenuItemController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - menuItem name '
                 *
                 *                 - quantity */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["OrderMenuItem"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    OrderMenuItemController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrderMenuItemDto"];
            };
        };
        responses: {
            /** @description Order Menu Item successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderMenuItem"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderMenuItemController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order Menu Item found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderMenuItem"];
                };
            };
            /** @description Order Menu Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderMenuItemController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order Menu Item successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order Menu Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderMenuItemController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrderMenuItemDto"];
            };
        };
        responses: {
            /** @description Order Menu Item successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderMenuItem"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order Menu Item to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderContainerItemController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                     - containedItem name */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["OrderContainerItem"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    OrderContainerItemController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrderContainerItemDto"];
            };
        };
        responses: {
            /** @description Order Menu Item Component successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderContainerItem"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderContainerItemController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order Menu Item Component found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderContainerItem"];
                };
            };
            /** @description Order Menu Item Component not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderContainerItemController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order Menu Item Component successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order Menu Item Component not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderContainerItemController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrderContainerItemDto"];
            };
        };
        responses: {
            /** @description Order Menu Item Component successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderContainerItem"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order Menu Item Component to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemCategoryController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - categoryName */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["MenuItemCategory"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    MenuItemCategoryController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMenuItemCategoryDto"];
            };
        };
        responses: {
            /** @description Menu Item Category successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemCategory"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemCategoryController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Menu Item Category found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemCategory"];
                };
            };
            /** @description Menu Item Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemCategoryController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Menu Item Category successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Menu Item Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemCategoryController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMenuItemCategoryDto"];
            };
        };
        responses: {
            /** @description Menu Item Category successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemCategory"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Menu Item Category to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemSizeController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - name */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["MenuItemSize"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    MenuItemSizeController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMenuItemSizeDto"];
            };
        };
        responses: {
            /** @description Menu Item Size successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemSize"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemSizeController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Menu Item Size found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemSize"];
                };
            };
            /** @description Menu Item Size not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemSizeController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Menu Item Size successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Menu Item Size not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemSizeController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMenuItemSizeDto"];
            };
        };
        responses: {
            /** @description Menu Item Size successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemSize"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Menu Item Size to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *               - itemName'
                 *
                 *               - category (by name) */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                /** @description search by MenuItem name */
                search?: string;
                /** @description Filterable fields. Use format: field=value. Available filters:
                 *
                 *               - **category** (e.g., `category=5`) */
                filters?: string[];
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["MenuItem"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    MenuItemController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMenuItemDto"];
            };
        };
        responses: {
            /** @description Menu Item successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItem"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Menu Item found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItem"];
                };
            };
            /** @description Menu Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Menu Item successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Menu Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMenuItemDto"];
            };
        };
        responses: {
            /** @description Menu Item successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItem"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Menu Item to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemContainerItemController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - containedItem name */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["MenuItemContainerItem"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    MenuItemContainerItemController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMenuItemContainerItemDto"];
            };
        };
        responses: {
            /** @description Menu Item Component successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemContainerItem"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemContainerItemController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Menu Item Component found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemContainerItem"];
                };
            };
            /** @description Menu Item Component not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemContainerItemController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Menu Item Component successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Menu Item Component not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemContainerItemController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMenuItemContainerItemDto"];
            };
        };
        responses: {
            /** @description Menu Item Component successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemContainerItem"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Menu Item Component to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemContainerOptionsController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["MenuItemContainerOptions"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    MenuItemContainerOptionsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMenuItemContainerOptionsDto"];
            };
        };
        responses: {
            /** @description Menu Item Component Options created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemContainerOptions"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemContainerOptionsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Menu Item Component Options found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemContainerOptions"];
                };
            };
            /** @description Menu Item Component Options not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemContainerOptionsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Menu Item Component Options successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Menu Item Component Options not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemContainerOptionsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMenuItemContainerOptionsDto"];
            };
        };
        responses: {
            /** @description Menu Item Component Options successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemContainerOptions"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Menu Item Component Options to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemContainerRuleController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                     -validItem name */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["MenuItemContainerRule"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    MenuItemContainerRuleController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMenuItemContainerRuleDto"];
            };
        };
        responses: {
            /** @description Component Option successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemContainerRule"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemContainerRuleController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Component Option found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemContainerRule"];
                };
            };
            /** @description Component Option not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemContainerRuleController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Component Option successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Component Option not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuItemContainerRuleController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMenuItemContainerRuleDto"];
            };
        };
        responses: {
            /** @description Component Option successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuItemContainerRule"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Menu Item Size to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TemplateController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - templateName */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["Template"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    TemplateController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTemplateDto"];
            };
        };
        responses: {
            /** @description Template successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Template"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TemplateController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Template found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Template"];
                };
            };
            /** @description Template not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TemplateController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Template successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Template not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TemplateController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTemplateDto"];
            };
        };
        responses: {
            /** @description Template successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Template"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Template to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TemplateMenuItemController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - tablePosIndex */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["TemplateMenuItem"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    TemplateMenuItemController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTemplateMenuItemDto"];
            };
        };
        responses: {
            /** @description Template Menu Item successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateMenuItem"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TemplateMenuItemController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Template Menu Item found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateMenuItem"];
                };
            };
            /** @description Template Menu Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TemplateMenuItemController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Template Menu Item successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Template Menu Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TemplateMenuItemController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTemplateMenuItemDto"];
            };
        };
        responses: {
            /** @description Template Menu Item successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateMenuItem"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Template Menu Item to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LabelController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *              - labelType (by name)
                 *      */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                /** @description search by MenuItem name */
                search?: string;
                /** @description Filterable fields. Use format: field=value. Available filters:
                 *
                 *                   - ** labelType ** (e.g., `labelType=5`) */
                filters?: string[];
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["Label"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    LabelController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLabelDto"];
            };
        };
        responses: {
            /** @description Label successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Label"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LabelController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Label found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Label"];
                };
            };
            /** @description Label not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LabelController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Label successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Label not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LabelController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLabelDto"];
            };
        };
        responses: {
            /** @description Label successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Label"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Label to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LabelTypeController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *             - labelTypeName */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["LabelType"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    LabelTypeController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLabelTypeDto"];
            };
        };
        responses: {
            /** @description Label Type successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LabelType"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LabelTypeController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Label Type found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LabelType"];
                };
            };
            /** @description Label Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LabelTypeController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Label Type successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Label Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LabelTypeController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLabelTypeDto"];
            };
        };
        responses: {
            /** @description Label Type successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LabelType"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Label Type to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryAreaController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *               - areaName */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["InventoryArea"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    InventoryAreaController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInventoryAreaDto"];
            };
        };
        responses: {
            /** @description Inventory Area successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryArea"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryAreaController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Area found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryArea"];
                };
            };
            /** @description Inventory Area not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryAreaController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Area successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Area not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryAreaController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateInventoryAreaDto"];
            };
        };
        responses: {
            /** @description Inventory Area successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryArea"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Area to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryAreaCountController_findAll: {
        parameters: {
            query: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - countDate
                 *
                 *                 - inventoryArea (by name) */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                /** @description search by InventoryItem name */
                search?: string;
                /** @description Filterable fields. Use format: filters=field,value. Available filters:
                 *
                 *           - **inventoryArea** (e.g., `filters=inventoryArea,5`) */
                filters?: string[];
                dateBy: string;
                /** @description Start date (inclusive) in ISO format (e.g., 2025-05-01) */
                startDate?: string;
                /** @description End date (inclusive) in ISO format (e.g., 2025-05-31) */
                endDate?: string;
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["InventoryAreaCount"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    InventoryAreaCountController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInventoryAreaCountDto"];
            };
        };
        responses: {
            /** @description Inventory Area Count successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryAreaCount"];
                };
            };
            /** @description Bad request: ValidationException or DatabaseException */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryAreaCountController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Area Count found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryAreaCount"];
                };
            };
            /** @description Inventory Area Count not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryAreaCountController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Area Count successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Area Count not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryAreaCountController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateInventoryAreaCountDto"];
            };
        };
        responses: {
            /** @description Inventory Area Count successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryAreaCount"];
                };
            };
            /** @description Bad request: ValidationException or DatabaseException */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Area Count to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryAreaItemController_findAll: {
        parameters: {
            query: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *           - countedItem
                 *
                 *           - amount */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                /** @description search by InventoryItem name */
                search?: string;
                filters: string[];
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["InventoryAreaItem"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    InventoryAreaItemController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInventoryAreaItemDto"];
            };
        };
        responses: {
            /** @description Inventory Area Item successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryAreaItem"];
                };
            };
            /** @description Bad request: ValidationException or DatabaseException */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryAreaItemController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Area Item found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryAreaItem"];
                };
            };
            /** @description Inventory Area Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryAreaItemController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Area Item successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Area Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryAreaItemController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateInventoryAreaItemDto"];
            };
        };
        responses: {
            /** @description Inventory Area Item successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryAreaItem"];
                };
            };
            /** @description Bad request: ValidationException or DatabaseException */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Area Item to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *               - itemName
                 *
                 *               - vendor (by name, nulls sorted last)
                 *
                 *               - category (by name, nulls sorted last) */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                /** @description search by inventory item name */
                search?: string;
                /** @description Filterable fields. Use format: field=value. Available filters:
                 *
                 *               - ** category ** (e.g., `category=5`)
                 *
                 *               - ** vendor ** (e.g., `vendor=5`) */
                filters?: string[];
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["InventoryItem"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    InventoryItemController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInventoryItemDto"];
            };
        };
        responses: {
            /** @description Inventory Item successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItem"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Item found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItem"];
                };
            };
            /** @description Inventory Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Item successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateInventoryItemDto"];
            };
        };
        responses: {
            /** @description Inventory Item successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItem"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Item to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemCategoryController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                   - categoryName */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["InventoryItemCategory"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    InventoryItemCategoryController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInventoryItemCategoryDto"];
            };
        };
        responses: {
            /** @description Inventory Item Category successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemCategory"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemCategoryController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Item Category found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemCategory"];
                };
            };
            /** @description Inventory Item Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemCategoryController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Item Category successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Item Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemCategoryController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateInventoryItemCategoryDto"];
            };
        };
        responses: {
            /** @description Inventory Item Category successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemCategory"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Item Category to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemPackageController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - packageName */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["InventoryItemPackage"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    InventoryItemPackageController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInventoryItemPackageDto"];
            };
        };
        responses: {
            /** @description Inventory Item Package successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemPackage"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemPackageController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Item Package found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemPackage"];
                };
            };
            /** @description Inventory Item Package not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemPackageController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Item Package successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Item Package not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemPackageController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateInventoryItemPackageDto"];
            };
        };
        responses: {
            /** @description Inventory Item Package successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemPackage"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Item Package to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemSizeController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - cost */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["InventoryItemSize"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    InventoryItemSizeController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInventoryItemSizeDto"];
            };
        };
        responses: {
            /** @description Inventory Item Size successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemSize"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemSizeController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Item Size found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemSize"];
                };
            };
            /** @description Inventory Item Size not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemSizeController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Item Size successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Item Size not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemSizeController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMenuItemSizeDto"];
            };
        };
        responses: {
            /** @description Inventory Item Size successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemSize"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Item Size to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemVendorController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - vendorName */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["InventoryItemVendor"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    InventoryItemVendorController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInventoryItemVendorDto"];
            };
        };
        responses: {
            /** @description Inventory Item Vendor successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemVendor"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemVendorController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Item Vendor found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemVendor"];
                };
            };
            /** @description Inventory Item Vendor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemVendorController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Inventory Item Vendor successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Item Vendor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryItemVendorController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateInventoryItemVendorDto"];
            };
        };
        responses: {
            /** @description Inventory Item Vendor successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItemVendor"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Inventory Item Vendor to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UnitOfMeasureController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - name
                 *
                 *                 - category (by name, nulls last) */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["UnitOfMeasure"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    UnitOfMeasureController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUnitOfMeasureDto"];
            };
        };
        responses: {
            /** @description Unit of Measure successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitOfMeasure"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UnitOfMeasureController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Unit of Measure found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitOfMeasure"];
                };
            };
            /** @description Unit of Measure not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UnitOfMeasureController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Unit of Measure successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unit of Measure not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UnitOfMeasureController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUnitOfMeasureDto"];
            };
        };
        responses: {
            /** @description Unit of Measure successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitOfMeasure"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unit of Measure to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UnitOfMeasureCategoryController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - categoryName */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["UnitOfMeasureCategory"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    UnitOfMeasureCategoryController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUnitOfMeasureCategoryDto"];
            };
        };
        responses: {
            /** @description Unit Category successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitOfMeasureCategory"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UnitOfMeasureCategoryController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Unit Category found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitOfMeasureCategory"];
                };
            };
            /** @description Unit Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UnitOfMeasureCategoryController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Unit Category successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unit Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UnitOfMeasureCategoryController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUnitOfMeasureCategoryDto"];
            };
        };
        responses: {
            /** @description Unit Category successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitOfMeasureCategory"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unit Category to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *               - recipeName
                 *
                 *               - category name (nulls last)
                 *
                 *               - subCategory name (nulls last) */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                /** @description search by Recipe name, and RecipeIngredient name */
                search?: string;
                /** @description Filterable fields. Use format: field=value. Available filters:
                 *
                 *               - **category** (e.g., `category=5`)
                 *
                 *               - **subCategory** */
                filters?: string[];
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["Recipe"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    RecipeController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRecipeDto"];
            };
        };
        responses: {
            /** @description Recipe successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Recipe"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recipe found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Recipe"];
                };
            };
            /** @description Recipe not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recipe successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Recipe not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRecipeDto"];
            };
        };
        responses: {
            /** @description Recipe successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Recipe"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Recipe to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeCategoryController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - categoryName */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["RecipeCategory"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    RecipeCategoryController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRecipeCategoryDto"];
            };
        };
        responses: {
            /** @description Recipe Category successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecipeCategory"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeCategoryController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recipe Category found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecipeCategory"];
                };
            };
            /** @description Recipe Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeCategoryController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recipe Category successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Recipe Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeCategoryController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRecipeCategoryDto"];
            };
        };
        responses: {
            /** @description Recipe Category successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecipeCategory"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Recipe Category to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeSubCategoryController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - subCategoryName
                 *      */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["RecipeSubCategory"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    RecipeSubCategoryController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRecipeSubCategoryDto"];
            };
        };
        responses: {
            /** @description Recipe Sub Category successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecipeSubCategory"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeSubCategoryController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recipe Sub Category found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecipeSubCategory"];
                };
            };
            /** @description Recipe Sub Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeSubCategoryController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recipe Sub Category successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Recipe Sub Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeSubCategoryController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRecipeSubCategoryDto"];
            };
        };
        responses: {
            /** @description Recipe Sub Category successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecipeSubCategory"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Recipe Sub Category to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeIngredientController_findAll: {
        parameters: {
            query?: {
                limit?: number;
                offset?: string;
                /** @description Field to sort by. Available options:
                 *
                 *                 - ingredient (by name) */
                sortBy?: string;
                /** @description Sort order: ASC or DESC */
                sortOrder?: "ASC" | "DESC";
                relations?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["RecipeIngredient"][];
                        /** @example 2 */
                        nextCursor?: string;
                    };
                };
            };
        };
    };
    RecipeIngredientController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRecipeIngredientDto"];
            };
        };
        responses: {
            /** @description Recipe Ingredient successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecipeIngredient"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeIngredientController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recipe Ingredient found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecipeIngredient"];
                };
            };
            /** @description Recipe Ingredient not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeIngredientController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recipe Ingredient successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Recipe Ingredient not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeIngredientController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRecipeIngredientDto"];
            };
        };
        responses: {
            /** @description Recipe Ingredient successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecipeIngredient"];
                };
            };
            /** @description Bad request (validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Recipe Ingredient to update not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
